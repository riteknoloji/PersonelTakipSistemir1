{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Personnel Management and Tracking System\n\n## Overview\n\nThis is a comprehensive personnel management and tracking system designed for Turkish companies. The system provides a full-stack solution for managing employees, branches, shifts, leave requests, attendance tracking, and comprehensive reporting through a single unified platform. The application features a modern, responsive design with Turkish language interface throughout.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Admin Credentials\n\n**Phone**: 05434989203  \n**Password**: ADMÄ°N123  \n**2FA Code**: 123456  \n\nThese credentials have been saved for system access and will be used for admin personnel creation.\n\n## System Architecture\n\n### Frontend Architecture\n- **React + Vite**: Modern frontend framework with fast development server and hot module replacement\n- **TypeScript**: Type-safe development with strict type checking enabled\n- **Wouter**: Lightweight client-side routing solution for single-page application navigation\n- **Shadcn/UI + Radix UI**: Component library providing accessible, customizable UI components\n- **TailwindCSS**: Utility-first CSS framework for rapid UI development\n- **React Hook Form + Zod**: Form handling with robust validation and type safety\n- **TanStack Query**: Server state management with caching, synchronization, and background updates\n\n### Backend Architecture\n- **Node.js + Express**: RESTful API server with middleware-based request handling\n- **TypeScript**: End-to-end type safety across client and server\n- **Passport.js**: Authentication middleware with local strategy and session management\n- **Express Session**: Server-side session management with PostgreSQL store\n- **JWT + 2FA**: JSON Web Token authentication with SMS-based two-factor authentication\n\n### Role-Based Access Control\n- **Super Admin**: Full system access and user management capabilities\n- **Admin**: Delegated permissions based on Super Admin authorization\n- **Branch Admin**: Limited access to assigned branch personnel and operations only\n\n### Database Design\n- **PostgreSQL**: Primary relational database with UUID primary keys\n- **Drizzle ORM**: Type-safe database operations with schema validation\n- **Connection Pooling**: Neon serverless PostgreSQL with WebSocket support for scalability\n- **Schema**: Comprehensive data model covering users, branches, personnel, shifts, attendance, leave requests, and relationships\n\n### Authentication & Security\n- **Phone-based Authentication**: Login exclusively via phone number (no email addresses)\n- **Password Hashing**: Secure password storage using Node.js scrypt with salt\n- **Session Management**: Server-side sessions with PostgreSQL storage\n- **Two-Factor Authentication**: SMS verification via Netgsm API integration\n- **CSRF Protection**: Session-based protection with secure cookie configuration\n\n## External Dependencies\n\n### SMS Service Integration\n- **Netgsm API**: Turkish SMS service provider for 2FA verification codes\n- **Configuration**: Username, password, and title configuration via environment variables\n- **Failover Handling**: Graceful error handling for SMS delivery failures\n\n### Database Service\n- **Neon PostgreSQL**: Serverless PostgreSQL database with WebSocket connection support\n- **Connection Management**: Pool-based connections with automatic scaling\n- **Migration Support**: Drizzle Kit for database schema migrations\n\n### Development Tools\n- **Replit Integration**: Development environment with runtime error overlay and cartographer\n- **Vite Plugins**: Hot module replacement, React fast refresh, and development tooling\n- **Build System**: ESBuild for production bundling with external package handling\n\n### UI Component Libraries\n- **Radix UI Primitives**: Headless, accessible UI component primitives\n- **Lucide React**: Comprehensive icon library with consistent styling\n- **React Day Picker**: Calendar and date selection components\n- **Input OTP**: One-time password input components for 2FA\n- **Embla Carousel**: Touch-friendly carousel components\n\n### Form Management\n- **React Hook Form**: Performant form library with minimal re-renders\n- **Hookform Resolvers**: Zod integration for schema-based validation\n- **Zod**: Runtime type validation and schema definition\n- **Drizzle Zod**: Automatic schema generation from database models","size_bytes":4358},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2766},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport { netgsmService } from \"./services/netgsm\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nfunction generateTwoFactorCode(): string {\n  return Math.floor(100000 + Math.random() * 900000).toString();\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET || \"default-secret-change-in-production\",\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      secure: process.env.NODE_ENV === 'production',\n      httpOnly: true,\n      maxAge: 24 * 60 * 60 * 1000 // 24 hours\n    }\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(\n      { usernameField: 'phone' },\n      async (phone, password, done) => {\n        try {\n          const user = await storage.getUserByPhone(phone);\n          if (!user || !user.isActive || !(await comparePasswords(password, user.password))) {\n            return done(null, false, { message: 'Telefon numarasÄ± veya Åifre hatalÄ±' });\n          }\n          return done(null, user);\n        } catch (error) {\n          return done(error);\n        }\n      }\n    )\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      done(null, user);\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Register endpoint\n  app.post(\"/api/register\", async (req, res, next) => {\n    try {\n      const { phone, password, name, role, branchId } = req.body;\n\n      if (!phone || !password || !name) {\n        return res.status(400).json({ message: \"Telefon, Åifre ve ad alanlarÄ± zorunludur\" });\n      }\n\n      const existingUser = await storage.getUserByPhone(phone);\n      if (existingUser) {\n        return res.status(400).json({ message: \"Bu telefon numarasÄ± zaten kullanÄ±lÄ±yor\" });\n      }\n\n      const user = await storage.createUser({\n        phone,\n        password: await hashPassword(password),\n        name,\n        role: role || 'branch_admin',\n        branchId,\n        isActive: true\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(201).json({\n          id: user.id,\n          phone: user.phone,\n          name: user.name,\n          role: user.role,\n          branchId: user.branchId\n        });\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  // Login endpoint with 2FA\n  app.post(\"/api/login\", async (req, res, next) => {\n    passport.authenticate(\"local\", async (err: any, user: SelectUser, info: any) => {\n      if (err) return next(err);\n      if (!user) {\n        return res.status(401).json({ message: info?.message || \"GiriÅ baÅarÄ±sÄ±z\" });\n      }\n\n      try {\n        // Generate and send 2FA code - special case for super admin\n        let twoFactorCode: string;\n        let twoFactorExpiry: Date;\n        \n        if (user.phone === '05434989203') {\n          // Super admin gets fixed 2FA code\n          twoFactorCode = '123456';\n          twoFactorExpiry = new Date(Date.now() + 365 * 24 * 60 * 60 * 1000); // 1 year\n        } else {\n          twoFactorCode = generateTwoFactorCode();\n          twoFactorExpiry = new Date(Date.now() + 5 * 60 * 1000); // 5 minutes\n        }\n\n        await storage.updateUser(user.id, {\n          twoFactorCode,\n          twoFactorExpiry\n        });\n\n        // Send SMS only for non-super admin users\n        if (user.phone !== '05434989203') {\n          const smsSuccess = await netgsmService.send2FA(user.phone, twoFactorCode);\n          if (!smsSuccess) {\n            console.error(`2FA SMS gÃ¶nderilemedi: ${user.phone}`);\n            // In production, you might want to fail here, but for development we continue\n          }\n        }\n\n        res.json({ \n          message: user.phone === '05434989203' \n            ? \"SÃ¼per admin iÃ§in sabit kod: 123456\" \n            : \"DoÄrulama kodu telefon numaranÄ±za gÃ¶nderildi\",\n          requiresTwoFactor: true,\n          userId: user.id\n        });\n      } catch (error) {\n        next(error);\n      }\n    })(req, res, next);\n  });\n\n  // 2FA verification endpoint\n  app.post(\"/api/verify-2fa\", async (req, res, next) => {\n    try {\n      const { userId, code } = req.body;\n\n      if (!userId || !code) {\n        return res.status(400).json({ message: \"KullanÄ±cÄ± ID ve doÄrulama kodu gerekli\" });\n      }\n\n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"KullanÄ±cÄ± bulunamadÄ±\" });\n      }\n\n      if (!user.twoFactorCode || !user.twoFactorExpiry) {\n        return res.status(400).json({ message: \"DoÄrulama kodu bulunamadÄ±\" });\n      }\n\n      if (new Date() > user.twoFactorExpiry) {\n        return res.status(400).json({ message: \"DoÄrulama kodu sÃ¼resi dolmuÅ\" });\n      }\n\n      if (user.twoFactorCode !== code) {\n        return res.status(400).json({ message: \"DoÄrulama kodu hatalÄ±\" });\n      }\n\n      // Clear 2FA code\n      await storage.updateUser(user.id, {\n        twoFactorCode: null,\n        twoFactorExpiry: null\n      });\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.json({\n          id: user.id,\n          phone: user.phone,\n          name: user.name,\n          role: user.role,\n          branchId: user.branchId\n        });\n      });\n    } catch (error) {\n      next(error);\n    }\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    const user = req.user!;\n    res.json({\n      id: user.id,\n      phone: user.phone,\n      name: user.name,\n      role: user.role,\n      branchId: user.branchId\n    });\n  });\n}\n","size_bytes":6866},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\n// Configure SSL settings for development environment\nconst poolConfig = { \n  connectionString: process.env.DATABASE_URL,\n  ssl: process.env.NODE_ENV === 'development' ? { rejectUnauthorized: false } : true\n};\n\nexport const pool = new Pool(poolConfig);\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":658},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { setupAuth } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { insertPersonnelSchema, insertBranchSchema, insertShiftSchema, insertLeaveRequestSchema, insertPersonnelLeaveBalanceSchema } from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup multer for file uploads\n  const upload = multer({\n    storage: multer.diskStorage({\n      destination: (req, file, cb) => {\n        const uploadDir = path.join(process.cwd(), 'uploads', 'photos');\n        fs.mkdirSync(uploadDir, { recursive: true });\n        cb(null, uploadDir);\n      },\n      filename: (req, file, cb) => {\n        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);\n        cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));\n      }\n    }),\n    limits: {\n      fileSize: 5 * 1024 * 1024, // 5MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      if (!file.mimetype.startsWith('image/')) {\n        return cb(new Error('Sadece resim dosyalarÄ± kabul edilir'));\n      }\n      cb(null, true);\n    }\n  });\n\n  // Setup authentication routes\n  setupAuth(app);\n\n  // Serve uploaded files\n  app.use('/uploads', express.static(path.join(process.cwd(), 'uploads')));\n\n  // Middleware to check authentication\n  const requireAuth = (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Oturum aÃ§manÄ±z gerekiyor\" });\n    }\n    next();\n  };\n\n  // Middleware to check admin role\n  const requireAdmin = (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Oturum aÃ§manÄ±z gerekiyor\" });\n    }\n    if (req.user.role === 'branch_admin') {\n      return res.status(403).json({ message: \"Bu iÅlem iÃ§in yetkiniz bulunmamaktadÄ±r\" });\n    }\n    next();\n  };\n\n  // Middleware to check super admin role\n  const requireSuperAdmin = (req: any, res: any, next: any) => {\n    if (!req.isAuthenticated()) {\n      return res.status(401).json({ message: \"Oturum aÃ§manÄ±z gerekiyor\" });\n    }\n    if (req.user.role !== 'super_admin') {\n      return res.status(403).json({ message: \"Bu iÅlem iÃ§in sÃ¼per admin yetkiniz bulunmamaktadÄ±r\" });\n    }\n    next();\n  };\n\n  // Dashboard stats\n  app.get(\"/api/stats\", requireAuth, async (req, res) => {\n    try {\n      const stats = await storage.getStats();\n      res.json(stats);\n    } catch (error) {\n      res.status(500).json({ message: \"Ä°statistikler yÃ¼klenirken hata oluÅtu\" });\n    }\n  });\n\n  // Branches\n  app.get(\"/api/branches\", requireAuth, async (req, res) => {\n    try {\n      const branches = await storage.getBranches();\n      res.json(branches);\n    } catch (error) {\n      res.status(500).json({ message: \"Åubeler yÃ¼klenirken hata oluÅtu\" });\n    }\n  });\n\n  app.post(\"/api/branches\", requireAdmin, async (req, res) => {\n    try {\n      const validatedData = insertBranchSchema.parse(req.body);\n      const branch = await storage.createBranch(validatedData);\n      res.status(201).json(branch);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Åube oluÅturulurken hata oluÅtu\" });\n    }\n  });\n\n  app.put(\"/api/branches/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const branch = await storage.updateBranch(id, req.body);\n      if (!branch) {\n        return res.status(404).json({ message: \"Åube bulunamadÄ±\" });\n      }\n      res.json(branch);\n    } catch (error) {\n      res.status(500).json({ message: \"Åube gÃ¼ncellenirken hata oluÅtu\" });\n    }\n  });\n\n  // Personnel\n  app.get(\"/api/personnel\", requireAuth, async (req, res) => {\n    try {\n      const { branchId, search } = req.query;\n      let personnel;\n\n      if (search) {\n        personnel = await storage.searchPersonnel(search as string);\n      } else if (branchId) {\n        personnel = await storage.getPersonnelByBranch(branchId as string);\n      } else {\n        // Branch admins can only see their branch personnel\n        if (req.user?.role === 'branch_admin' && req.user?.branchId) {\n          personnel = await storage.getPersonnelByBranch(req.user.branchId);\n        } else {\n          personnel = await storage.getPersonnel();\n        }\n      }\n\n      res.json(personnel);\n    } catch (error) {\n      res.status(500).json({ message: \"Personel listesi yÃ¼klenirken hata oluÅtu\" });\n    }\n  });\n\n  app.get(\"/api/personnel/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const person = await storage.getPersonnelById(id);\n      if (!person) {\n        return res.status(404).json({ message: \"Personel bulunamadÄ±\" });\n      }\n\n      // Branch admins can only see their branch personnel\n      if (req.user?.role === 'branch_admin' && req.user?.branchId !== person.branchId) {\n        return res.status(403).json({ message: \"Bu personeli gÃ¶rme yetkiniz bulunmamaktadÄ±r\" });\n      }\n\n      res.json(person);\n    } catch (error) {\n      res.status(500).json({ message: \"Personel bilgileri yÃ¼klenirken hata oluÅtu\" });\n    }\n  });\n\n  app.post(\"/api/personnel\", requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertPersonnelSchema.parse(req.body);\n      \n      // Branch admins can only add to their branch\n      if (req.user?.role === 'branch_admin') {\n        if (req.user?.branchId !== validatedData.branchId) {\n          return res.status(403).json({ message: \"BaÅka Åubeye personel ekleyemezsiniz\" });\n        }\n      }\n\n      const person = await storage.createPersonnel(validatedData);\n      res.status(201).json(person);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Personel oluÅturulurken hata oluÅtu\" });\n    }\n  });\n\n  app.put(\"/api/personnel/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const existingPerson = await storage.getPersonnelById(id);\n      \n      if (!existingPerson) {\n        return res.status(404).json({ message: \"Personel bulunamadÄ±\" });\n      }\n\n      // Branch admins can only edit their branch personnel\n      if (req.user?.role === 'branch_admin' && req.user?.branchId !== existingPerson.branchId) {\n        return res.status(403).json({ message: \"Bu personeli dÃ¼zenleme yetkiniz bulunmamaktadÄ±r\" });\n      }\n\n      const person = await storage.updatePersonnel(id, req.body);\n      res.json(person);\n    } catch (error) {\n      res.status(500).json({ message: \"Personel gÃ¼ncellenirken hata oluÅtu\" });\n    }\n  });\n\n  // Photo upload route\n  app.post(\"/api/personnel/:id/photo\", requireAuth, upload.single('photo'), async (req, res) => {\n    try {\n      const { id } = req.params;\n      const existingPerson = await storage.getPersonnelById(id);\n      \n      if (!existingPerson) {\n        return res.status(404).json({ message: \"Personel bulunamadÄ±\" });\n      }\n\n      // Branch admins can only edit their branch personnel\n      if (req.user?.role === 'branch_admin' && req.user?.branchId !== existingPerson.branchId) {\n        return res.status(403).json({ message: \"Bu personelin fotoÄrafÄ±nÄ± deÄiÅtirme yetkiniz bulunmamaktadÄ±r\" });\n      }\n\n      if (!req.file) {\n        return res.status(400).json({ message: \"FotoÄraf dosyasÄ± bulunamadÄ±\" });\n      }\n\n      // Generate photo URL\n      const photoUrl = `/uploads/photos/${req.file.filename}`;\n      \n      // Update personnel with photo URL\n      const person = await storage.updatePersonnel(id, { profilePhotoUrl: photoUrl });\n      \n      res.json({ \n        message: \"Profil fotoÄrafÄ± baÅarÄ±yla gÃ¼ncellendi\",\n        photoUrl: photoUrl,\n        personnel: person\n      });\n    } catch (error: any) {\n      console.error('Photo upload error:', error);\n      res.status(500).json({ message: error.message || \"FotoÄraf yÃ¼klenirken hata oluÅtu\" });\n    }\n  });\n\n  // Shifts\n  app.get(\"/api/shifts\", requireAuth, async (req, res) => {\n    try {\n      const { branchId } = req.query;\n      let shifts;\n\n      if (branchId) {\n        shifts = await storage.getShiftsByBranch(branchId as string);\n      } else if (req.user?.role === 'branch_admin' && req.user?.branchId) {\n        shifts = await storage.getShiftsByBranch(req.user.branchId);\n      } else {\n        shifts = await storage.getShifts();\n      }\n\n      res.json(shifts);\n    } catch (error) {\n      res.status(500).json({ message: \"Vardiyalar yÃ¼klenirken hata oluÅtu\" });\n    }\n  });\n\n  app.post(\"/api/shifts\", requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertShiftSchema.parse(req.body);\n      \n      // Branch admins can only add shifts to their branch\n      if (req.user?.role === 'branch_admin') {\n        if (req.user?.branchId !== validatedData.branchId) {\n          return res.status(403).json({ message: \"BaÅka Åubeye vardiya ekleyemezsiniz\" });\n        }\n      }\n\n      const shift = await storage.createShift(validatedData);\n      res.status(201).json(shift);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Vardiya oluÅturulurken hata oluÅtu\" });\n    }\n  });\n\n  // Attendance\n  app.get(\"/api/attendance\", requireAuth, async (req, res) => {\n    try {\n      const { personnelId, startDate, endDate } = req.query;\n      \n      if (personnelId) {\n        const attendance = await storage.getAttendanceByPersonnel(\n          personnelId as string,\n          startDate ? new Date(startDate as string) : undefined,\n          endDate ? new Date(endDate as string) : undefined\n        );\n        res.json(attendance);\n      } else {\n        const todayAttendance = await storage.getTodayAttendance();\n        res.json(todayAttendance);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Devam bilgileri yÃ¼klenirken hata oluÅtu\" });\n    }\n  });\n\n  app.post(\"/api/attendance\", requireAuth, async (req, res) => {\n    try {\n      const { personnelId, checkIn, checkOut, location, qrCode, notes } = req.body;\n      \n      const attendanceData = {\n        personnelId,\n        checkIn: checkIn ? new Date(checkIn) : undefined,\n        checkOut: checkOut ? new Date(checkOut) : undefined,\n        location,\n        qrCode,\n        notes,\n        date: new Date()\n      };\n\n      const attendance = await storage.createAttendance(attendanceData);\n      res.status(201).json(attendance);\n    } catch (error) {\n      res.status(500).json({ message: \"Devam kaydÄ± oluÅturulurken hata oluÅtu\" });\n    }\n  });\n\n  // Leave Requests\n  app.get(\"/api/leave-requests\", requireAuth, async (req, res) => {\n    try {\n      const { personnelId } = req.query;\n      \n      if (personnelId) {\n        const requests = await storage.getLeaveRequestsByPersonnel(personnelId as string);\n        res.json(requests);\n      } else {\n        const requests = await storage.getLeaveRequests();\n        res.json(requests);\n      }\n    } catch (error) {\n      res.status(500).json({ message: \"Ä°zin talepleri yÃ¼klenirken hata oluÅtu\" });\n    }\n  });\n\n  app.post(\"/api/leave-requests\", requireAuth, async (req, res) => {\n    try {\n      const validatedData = insertLeaveRequestSchema.parse(req.body);\n      const request = await storage.createLeaveRequest(validatedData);\n      res.status(201).json(request);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Ä°zin talebi oluÅturulurken hata oluÅtu\" });\n    }\n  });\n\n  app.put(\"/api/leave-requests/:id\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, approvedBy } = req.body;\n\n      const updates: any = { status };\n      if (status === 'approved' || status === 'rejected') {\n        updates.approvedBy = req.user?.id;\n        updates.approvedAt = new Date();\n      }\n\n      const request = await storage.updateLeaveRequest(id, updates);\n      if (!request) {\n        return res.status(404).json({ message: \"Ä°zin talebi bulunamadÄ±\" });\n      }\n      res.json(request);\n    } catch (error) {\n      res.status(500).json({ message: \"Ä°zin talebi gÃ¼ncellenirken hata oluÅtu\" });\n    }\n  });\n\n  // QR Code Scanning\n  app.post(\"/api/qr-scan\", requireAuth, async (req, res) => {\n    try {\n      const { qrCode } = req.body;\n      \n      if (!qrCode) {\n        return res.status(400).json({ message: \"QR kod gerekli\" });\n      }\n\n      // QR kodundan personel ID'sini Ã§Ä±kar (format: PERSONNEL_ID)\n      const personnelId = qrCode;\n      \n      // Personeli bul\n      const personnel = await storage.getPersonnelById(personnelId);\n      if (!personnel) {\n        return res.status(404).json({ message: \"GeÃ§ersiz QR kod - Personel bulunamadÄ±\" });\n      }\n\n      // BugÃ¼nkÃ¼ devam kaydÄ±nÄ± kontrol et\n      const today = new Date();\n      const todayStr = today.toISOString().split('T')[0];\n      \n      const existingAttendance = await storage.getAttendanceByPersonnelAndDate(personnelId, todayStr);\n      \n      if (!existingAttendance) {\n        // GiriÅ kaydÄ± oluÅtur\n        const attendanceData = {\n          personnelId,\n          date: today,\n          checkIn: today,\n          checkOut: null,\n          notes: \"QR kod ile giriÅ\"\n        };\n        \n        await storage.createAttendance(attendanceData);\n        res.json({ \n          message: `${personnel.firstName} ${personnel.lastName} baÅarÄ±yla giriÅ yaptÄ±`,\n          action: \"check-in\",\n          time: today.toLocaleTimeString('tr-TR')\n        });\n      } else if (existingAttendance.checkIn && !existingAttendance.checkOut) {\n        // ÃÄ±kÄ±Å kaydÄ± oluÅtur\n        const updatedAttendance = {\n          ...existingAttendance,\n          checkOut: today\n        };\n        \n        await storage.updateAttendance(existingAttendance.id, updatedAttendance);\n        res.json({ \n          message: `${personnel.firstName} ${personnel.lastName} baÅarÄ±yla Ã§Ä±kÄ±Å yaptÄ±`,\n          action: \"check-out\",\n          time: today.toLocaleTimeString('tr-TR')\n        });\n      } else {\n        res.status(400).json({ message: \"Personel zaten giriÅ ve Ã§Ä±kÄ±Å kaydÄ± tamamlamÄ±Å\" });\n      }\n    } catch (error) {\n      console.error(\"QR scan error:\", error);\n      res.status(500).json({ message: \"QR kod iÅlenirken hata oluÅtu\" });\n    }\n  });\n\n  // Today's Attendance\n  app.get(\"/api/attendance/today\", requireAuth, async (req, res) => {\n    try {\n      const today = new Date().toISOString().split('T')[0];\n      const attendance = await storage.getAttendanceByDate(today);\n      res.json(attendance);\n    } catch (error) {\n      res.status(500).json({ message: \"BugÃ¼nkÃ¼ devam kayÄ±tlarÄ± yÃ¼klenirken hata oluÅtu\" });\n    }\n  });\n\n  // System Settings\n  app.get(\"/api/settings\", requireAuth, requireSuperAdmin, async (req, res) => {\n    try {\n      const settings = await storage.getSystemSettings();\n      res.json(settings || {\n        companyName: \"\",\n        companyAddress: \"\",\n        companyPhone: \"\",\n        companyEmail: \"\",\n        workHours: {\n          start: \"09:00\",\n          end: \"18:00\",\n          lunchBreak: 60,\n        },\n        notifications: {\n          emailEnabled: true,\n          smsEnabled: true,\n          lateArrivalAlert: true,\n          absenceAlert: true,\n        },\n        attendance: {\n          graceMinutes: 15,\n          autoClockOut: false,\n          requireLocationCheck: false,\n        },\n        backup: {\n          autoBackup: true,\n          backupFrequency: \"daily\",\n          retentionDays: 30,\n        },\n      });\n    } catch (error) {\n      res.status(500).json({ message: \"Sistem ayarlarÄ± yÃ¼klenirken hata oluÅtu\" });\n    }\n  });\n\n  app.put(\"/api/settings\", requireAuth, requireSuperAdmin, async (req, res) => {\n    try {\n      const settings = await storage.updateSystemSettings(req.body);\n      res.json(settings);\n    } catch (error) {\n      res.status(500).json({ message: \"Sistem ayarlarÄ± gÃ¼ncellenirken hata oluÅtu\" });\n    }\n  });\n\n  // Personnel Leave Balances\n  app.get(\"/api/personnel/:id/leave-balances\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { year } = req.query;\n      \n      const currentYear = year ? parseInt(year as string) : new Date().getFullYear();\n      const balances = await storage.getPersonnelLeaveBalances(id, currentYear);\n      \n      res.json(balances);\n    } catch (error) {\n      res.status(500).json({ message: \"Ä°zin bakiyeleri yÃ¼klenirken hata oluÅtu\" });\n    }\n  });\n\n  app.post(\"/api/personnel/:id/leave-balances\", requireAuth, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const validatedData = insertPersonnelLeaveBalanceSchema.parse({\n        ...req.body,\n        personnelId: id\n      });\n      \n      const balance = await storage.createOrUpdatePersonnelLeaveBalance(validatedData);\n      res.status(201).json(balance);\n    } catch (error: any) {\n      res.status(400).json({ message: error.message || \"Ä°zin bakiyesi oluÅturulurken hata oluÅtu\" });\n    }\n  });\n\n  app.put(\"/api/personnel/:id/leave-balances/:balanceId\", requireAuth, async (req, res) => {\n    try {\n      const { id, balanceId } = req.params;\n      const balance = await storage.updatePersonnelLeaveBalance(balanceId, req.body);\n      \n      if (!balance) {\n        return res.status(404).json({ message: \"Ä°zin bakiyesi bulunamadÄ±\" });\n      }\n      \n      res.json(balance);\n    } catch (error) {\n      res.status(500).json({ message: \"Ä°zin bakiyesi gÃ¼ncellenirken hata oluÅtu\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":17623},"server/storage.ts":{"content":"import { users, branches, personnel, shifts, attendance, leaveRequests, personnelShifts, personnelLeaveBalances, type User, type InsertUser, type Branch, type InsertBranch, type Personnel, type InsertPersonnel, type Shift, type InsertShift, type LeaveRequest, type InsertLeaveRequest, type Attendance, type PersonnelLeaveBalance, type InsertPersonnelLeaveBalance } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, sql, like, gte, lte } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport connectPg from \"connect-pg-simple\";\nimport { pool } from \"./db\";\n\nconst PostgresSessionStore = connectPg(session);\n\nexport interface IStorage {\n  // Users\n  getUser(id: string): Promise<User | undefined>;\n  getUserByPhone(phone: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, updates: Partial<User>): Promise<User | undefined>;\n  \n  // Branches\n  getBranches(): Promise<Branch[]>;\n  getBranch(id: string): Promise<Branch | undefined>;\n  createBranch(branch: InsertBranch): Promise<Branch>;\n  updateBranch(id: string, updates: Partial<Branch>): Promise<Branch | undefined>;\n  \n  // Personnel\n  getPersonnel(): Promise<Personnel[]>;\n  getPersonnelByBranch(branchId: string): Promise<Personnel[]>;\n  getPersonnelById(id: string): Promise<Personnel | undefined>;\n  getPersonnelByPhone(phone: string): Promise<Personnel | undefined>;\n  createPersonnel(personnel: InsertPersonnel): Promise<Personnel>;\n  updatePersonnel(id: string, updates: Partial<Personnel>): Promise<Personnel | undefined>;\n  searchPersonnel(query: string): Promise<Personnel[]>;\n  \n  // Shifts\n  getShifts(): Promise<Shift[]>;\n  getShiftsByBranch(branchId: string): Promise<Shift[]>;\n  createShift(shift: InsertShift): Promise<Shift>;\n  updateShift(id: string, updates: Partial<Shift>): Promise<Shift | undefined>;\n  \n  // Attendance\n  getTodayAttendance(): Promise<Attendance[]>;\n  getAttendanceByPersonnel(personnelId: string, startDate?: Date, endDate?: Date): Promise<Attendance[]>;\n  getAttendanceByPersonnelAndDate(personnelId: string, date: string): Promise<Attendance | undefined>;\n  getAttendanceByDate(date: string): Promise<Attendance[]>;\n  createAttendance(attendance: Partial<Attendance>): Promise<Attendance>;\n  updateAttendance(id: string, updates: Partial<Attendance>): Promise<Attendance | undefined>;\n  \n  // Leave Requests\n  getLeaveRequests(): Promise<LeaveRequest[]>;\n  getLeaveRequestsByPersonnel(personnelId: string): Promise<LeaveRequest[]>;\n  createLeaveRequest(leaveRequest: InsertLeaveRequest): Promise<LeaveRequest>;\n  updateLeaveRequest(id: string, updates: Partial<LeaveRequest>): Promise<LeaveRequest | undefined>;\n  \n  // Personnel Leave Balances\n  getPersonnelLeaveBalances(personnelId: string, year: number): Promise<PersonnelLeaveBalance[]>;\n  createOrUpdatePersonnelLeaveBalance(balance: InsertPersonnelLeaveBalance): Promise<PersonnelLeaveBalance>;\n  updatePersonnelLeaveBalance(id: string, updates: Partial<PersonnelLeaveBalance>): Promise<PersonnelLeaveBalance | undefined>;\n  \n  // Stats\n  getStats(): Promise<{\n    totalPersonnel: number;\n    todayAttendance: number;\n    onLeave: number;\n    activeShifts: number;\n  }>;\n  \n  // System Settings\n  getSystemSettings(): Promise<any>;\n  updateSystemSettings(settings: any): Promise<any>;\n  \n  sessionStore: session.Store;\n}\n\nexport class DatabaseStorage implements IStorage {\n  sessionStore: session.Store;\n\n  constructor() {\n    this.sessionStore = new PostgresSessionStore({ \n      pool, \n      createTableIfMissing: true \n    });\n    // Sistem baÅlatÄ±lÄ±rken admin personelini ekle\n    this.initializeAdminPersonnel();\n  }\n\n  async initializeAdminPersonnel() {\n    try {\n      // Admin personeli zaten var mÄ± kontrol et\n      const existingAdmin = await this.getPersonnelByPhone(\"05434989203\");\n      if (!existingAdmin) {\n        // Admin personeli ekle\n        const adminPersonnel = {\n          employeeNumber: \"ADM001\",\n          firstName: \"Admin\",\n          lastName: \"KullanÄ±cÄ±\",\n          phone: \"05434989203\",\n          email: \"admin@company.com\",\n          nationalId: \"12345678901\",\n          position: \"Sistem YÃ¶neticisi\",\n          department: \"Bilgi Ä°Ålem\",\n          branchId: \"branch-001\", // Ana Åube\n          startDate: new Date(),\n          salary: 50000,\n          isActive: true,\n        };\n        \n        await this.createPersonnel(adminPersonnel);\n        console.log(\"Admin personeli baÅarÄ±yla eklendi:\", adminPersonnel.firstName, adminPersonnel.lastName);\n      } else {\n        console.log(\"Admin personeli zaten mevcut\");\n      }\n    } catch (error) {\n      console.error(\"Admin personeli eklenirken hata:\", error);\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByPhone(phone: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.phone, phone));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUser(id: string, updates: Partial<User>): Promise<User | undefined> {\n    const [user] = await db\n      .update(users)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user || undefined;\n  }\n\n  async getBranches(): Promise<Branch[]> {\n    return await db.select().from(branches).where(eq(branches.isActive, true)).orderBy(asc(branches.name));\n  }\n\n  async getBranch(id: string): Promise<Branch | undefined> {\n    const [branch] = await db.select().from(branches).where(eq(branches.id, id));\n    return branch || undefined;\n  }\n\n  async createBranch(insertBranch: InsertBranch): Promise<Branch> {\n    const [branch] = await db\n      .insert(branches)\n      .values(insertBranch)\n      .returning();\n    return branch;\n  }\n\n  async updateBranch(id: string, updates: Partial<Branch>): Promise<Branch | undefined> {\n    const [branch] = await db\n      .update(branches)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(branches.id, id))\n      .returning();\n    return branch || undefined;\n  }\n\n  async getPersonnel(): Promise<Personnel[]> {\n    return await db.select().from(personnel).where(eq(personnel.isActive, true)).orderBy(asc(personnel.firstName));\n  }\n\n  async getPersonnelByBranch(branchId: string): Promise<Personnel[]> {\n    return await db.select()\n      .from(personnel)\n      .where(and(eq(personnel.branchId, branchId), eq(personnel.isActive, true)))\n      .orderBy(asc(personnel.firstName));\n  }\n\n  async getPersonnelById(id: string): Promise<Personnel | undefined> {\n    const [person] = await db.select().from(personnel).where(eq(personnel.id, id));\n    return person || undefined;\n  }\n\n  async getPersonnelByPhone(phone: string): Promise<Personnel | undefined> {\n    const [person] = await db.select().from(personnel).where(eq(personnel.phone, phone));\n    return person || undefined;\n  }\n\n  async createPersonnel(insertPersonnel: InsertPersonnel): Promise<Personnel> {\n    const [person] = await db\n      .insert(personnel)\n      .values(insertPersonnel)\n      .returning();\n    return person;\n  }\n\n  async updatePersonnel(id: string, updates: Partial<Personnel>): Promise<Personnel | undefined> {\n    const [person] = await db\n      .update(personnel)\n      .set({ ...updates, updatedAt: new Date() })\n      .where(eq(personnel.id, id))\n      .returning();\n    return person || undefined;\n  }\n\n  async searchPersonnel(query: string): Promise<Personnel[]> {\n    return await db.select()\n      .from(personnel)\n      .where(\n        and(\n          eq(personnel.isActive, true),\n          sql`LOWER(${personnel.firstName} || ' ' || ${personnel.lastName}) LIKE LOWER('%' || ${query} || '%')`\n        )\n      )\n      .orderBy(asc(personnel.firstName));\n  }\n\n  async getShifts(): Promise<Shift[]> {\n    return await db.select().from(shifts).where(eq(shifts.isActive, true)).orderBy(asc(shifts.name));\n  }\n\n  async getShiftsByBranch(branchId: string): Promise<Shift[]> {\n    return await db.select()\n      .from(shifts)\n      .where(and(eq(shifts.branchId, branchId), eq(shifts.isActive, true)))\n      .orderBy(asc(shifts.name));\n  }\n\n  async createShift(insertShift: InsertShift): Promise<Shift> {\n    const [shift] = await db\n      .insert(shifts)\n      .values(insertShift)\n      .returning();\n    return shift;\n  }\n\n  async updateShift(id: string, updates: Partial<Shift>): Promise<Shift | undefined> {\n    const [shift] = await db\n      .update(shifts)\n      .set(updates)\n      .where(eq(shifts.id, id))\n      .returning();\n    return shift || undefined;\n  }\n\n  async getTodayAttendance(): Promise<Attendance[]> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    return await db.select()\n      .from(attendance)\n      .where(and(\n        gte(attendance.date, today),\n        lte(attendance.date, tomorrow)\n      ))\n      .orderBy(desc(attendance.createdAt));\n  }\n\n  async getAttendanceByPersonnel(personnelId: string, startDate?: Date, endDate?: Date): Promise<Attendance[]> {\n    let whereConditions = [eq(attendance.personnelId, personnelId)];\n    \n    if (startDate) {\n      whereConditions.push(gte(attendance.date, startDate));\n    }\n    if (endDate) {\n      whereConditions.push(lte(attendance.date, endDate));\n    }\n\n    return await db.select()\n      .from(attendance)\n      .where(and(...whereConditions))\n      .orderBy(desc(attendance.date));\n  }\n\n  async createAttendance(attendanceData: Partial<Attendance>): Promise<Attendance> {\n    const data = {\n      ...attendanceData,\n      personnelId: attendanceData.personnelId!\n    };\n    const [record] = await db\n      .insert(attendance)\n      .values(data)\n      .returning();\n    return record;\n  }\n\n  async getLeaveRequests(): Promise<LeaveRequest[]> {\n    return await db.select()\n      .from(leaveRequests)\n      .orderBy(desc(leaveRequests.createdAt));\n  }\n\n  async getLeaveRequestsByPersonnel(personnelId: string): Promise<LeaveRequest[]> {\n    return await db.select()\n      .from(leaveRequests)\n      .where(eq(leaveRequests.personnelId, personnelId))\n      .orderBy(desc(leaveRequests.createdAt));\n  }\n\n  async createLeaveRequest(insertLeaveRequest: InsertLeaveRequest): Promise<LeaveRequest> {\n    const [request] = await db\n      .insert(leaveRequests)\n      .values(insertLeaveRequest)\n      .returning();\n    return request;\n  }\n\n  async updateLeaveRequest(id: string, updates: Partial<LeaveRequest>): Promise<LeaveRequest | undefined> {\n    const [request] = await db\n      .update(leaveRequests)\n      .set(updates)\n      .where(eq(leaveRequests.id, id))\n      .returning();\n    return request || undefined;\n  }\n\n  async getAttendanceByPersonnelAndDate(personnelId: string, date: string): Promise<Attendance | undefined> {\n    const [record] = await db.select()\n      .from(attendance)\n      .where(and(\n        eq(attendance.personnelId, personnelId),\n        sql`DATE(${attendance.date}) = ${date}`\n      ));\n    return record || undefined;\n  }\n\n  async getAttendanceByDate(date: string): Promise<Attendance[]> {\n    return await db.select()\n      .from(attendance)\n      .where(sql`DATE(${attendance.date}) = ${date}`)\n      .orderBy(desc(attendance.checkInTime));\n  }\n\n  async updateAttendance(id: string, updates: Partial<Attendance>): Promise<Attendance | undefined> {\n    const [updated] = await db\n      .update(attendance)\n      .set(updates)\n      .where(eq(attendance.id, id))\n      .returning();\n    return updated || undefined;\n  }\n\n  async getSystemSettings(): Promise<any> {\n    // Bu gelecekte ayrÄ± bir tablo olabilir, Åimdilik default deÄerler dÃ¶ndÃ¼rÃ¼yoruz\n    return null;\n  }\n\n  async updateSystemSettings(settings: any): Promise<any> {\n    // Bu gelecekte ayrÄ± bir tablo olabilir, Åimdilik ayarlarÄ± dÃ¶ndÃ¼rÃ¼yoruz\n    return settings;\n  }\n\n  async getStats(): Promise<{\n    totalPersonnel: number;\n    todayAttendance: number;\n    onLeave: number;\n    activeShifts: number;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const [totalPersonnelResult] = await db.select({ count: sql<number>`count(*)` })\n      .from(personnel)\n      .where(eq(personnel.isActive, true));\n\n    const [todayAttendanceResult] = await db.select({ count: sql<number>`count(*)` })\n      .from(attendance)\n      .where(and(\n        gte(attendance.date, today),\n        lte(attendance.date, tomorrow)\n      ));\n\n    const [onLeaveResult] = await db.select({ count: sql<number>`count(*)` })\n      .from(leaveRequests)\n      .where(and(\n        eq(leaveRequests.status, 'approved'),\n        lte(leaveRequests.startDate, today),\n        gte(leaveRequests.endDate, today)\n      ));\n\n    const [activeShiftsResult] = await db.select({ count: sql<number>`count(*)` })\n      .from(shifts)\n      .where(eq(shifts.isActive, true));\n\n    return {\n      totalPersonnel: totalPersonnelResult.count,\n      todayAttendance: todayAttendanceResult.count,\n      onLeave: onLeaveResult.count,\n      activeShifts: activeShiftsResult.count,\n    };\n  }\n\n  async getSystemSettings(): Promise<any> {\n    // For now, we'll return default settings\n    // In production, you'd want to use a proper settings table\n    return null;\n  }\n\n  async updateSystemSettings(settings: any): Promise<any> {\n    // For now, we'll store settings in a simple file\n    // In production, you'd want to use a proper settings table\n    return settings;\n  }\n\n  // Personnel Leave Balances\n  async getPersonnelLeaveBalances(personnelId: string, year: number): Promise<PersonnelLeaveBalance[]> {\n    const balances = await db\n      .select()\n      .from(personnelLeaveBalances)\n      .where(\n        and(\n          eq(personnelLeaveBalances.personnelId, personnelId),\n          eq(personnelLeaveBalances.year, year)\n        )\n      )\n      .orderBy(asc(personnelLeaveBalances.leaveType));\n    return balances;\n  }\n\n  async createOrUpdatePersonnelLeaveBalance(balance: InsertPersonnelLeaveBalance): Promise<PersonnelLeaveBalance> {\n    // Check if balance already exists for this personnel, leave type, and year\n    const [existing] = await db\n      .select()\n      .from(personnelLeaveBalances)\n      .where(\n        and(\n          eq(personnelLeaveBalances.personnelId, balance.personnelId),\n          eq(personnelLeaveBalances.leaveType, balance.leaveType),\n          eq(personnelLeaveBalances.year, balance.year)\n        )\n      );\n\n    if (existing) {\n      // Update existing balance\n      const [updated] = await db\n        .update(personnelLeaveBalances)\n        .set({ \n          ...balance, \n          remainingDays: balance.totalDays - balance.usedDays,\n          updatedAt: new Date() \n        })\n        .where(eq(personnelLeaveBalances.id, existing.id))\n        .returning();\n      return updated;\n    } else {\n      // Create new balance\n      const [newBalance] = await db\n        .insert(personnelLeaveBalances)\n        .values({ \n          ...balance, \n          remainingDays: balance.totalDays - balance.usedDays \n        })\n        .returning();\n      return newBalance;\n    }\n  }\n\n  async updatePersonnelLeaveBalance(id: string, updates: Partial<PersonnelLeaveBalance>): Promise<PersonnelLeaveBalance | undefined> {\n    const updateData = { \n      ...updates, \n      updatedAt: new Date() \n    };\n    \n    // Recalculate remaining days if total or used days are updated\n    if (updates.totalDays !== undefined || updates.usedDays !== undefined) {\n      const [current] = await db.select().from(personnelLeaveBalances).where(eq(personnelLeaveBalances.id, id));\n      if (current) {\n        const totalDays = updates.totalDays ?? current.totalDays;\n        const usedDays = updates.usedDays ?? current.usedDays;\n        updateData.remainingDays = totalDays - usedDays;\n      }\n    }\n    \n    const [balance] = await db\n      .update(personnelLeaveBalances)\n      .set(updateData)\n      .where(eq(personnelLeaveBalances.id, id))\n      .returning();\n    return balance || undefined;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":16350},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, pgEnum } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Enums\nexport const userRoleEnum = pgEnum(\"user_role\", [\"super_admin\", \"admin\", \"branch_admin\"]);\nexport const leaveTypeEnum = pgEnum(\"leave_type\", [\"yillik\", \"hafta_tatili\", \"resmi_tatil\", \"hastalik\", \"dogum\", \"babalik\", \"evlilik\", \"olum\", \"mazeret\", \"ucretsiz\"]);\nexport const documentTypeEnum = pgEnum(\"document_type\", [\"health_report\", \"criminal_record\", \"other\"]);\nexport const shiftTypeEnum = pgEnum(\"shift_type\", [\"sabah\", \"oglen\", \"aksam\", \"gece\"]);\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  phone: text(\"phone\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  name: text(\"name\").notNull(),\n  role: userRoleEnum(\"role\").notNull().default(\"branch_admin\"),\n  branchId: varchar(\"branch_id\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  twoFactorCode: text(\"two_factor_code\"),\n  twoFactorExpiry: timestamp(\"two_factor_expiry\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Branches table\nexport const branches = pgTable(\"branches\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\"),\n  phone: text(\"phone\"),\n  parentBranchId: varchar(\"parent_branch_id\"),\n  managerId: varchar(\"manager_id\"), // Personnel ID of the branch manager\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Personnel table\nexport const personnel = pgTable(\"personnel\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  employeeNumber: text(\"employee_number\").notNull().unique(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\"),\n  nationalId: text(\"national_id\").notNull().unique(),\n  birthDate: timestamp(\"birth_date\"),\n  address: text(\"address\"),\n  position: text(\"position\").notNull(),\n  department: text(\"department\"),\n  branchId: varchar(\"branch_id\").notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  salary: integer(\"salary\"),\n  profilePhotoUrl: text(\"profile_photo_url\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Shifts table\nexport const shifts = pgTable(\"shifts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  type: shiftTypeEnum(\"type\").notNull(),\n  startTime: text(\"start_time\").notNull(), // HH:MM format\n  endTime: text(\"end_time\").notNull(), // HH:MM format\n  branchId: varchar(\"branch_id\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Personnel Shifts table\nexport const personnelShifts = pgTable(\"personnel_shifts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").notNull(),\n  shiftId: varchar(\"shift_id\").notNull(),\n  assignedDate: timestamp(\"assigned_date\").notNull(),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Attendance table\nexport const attendance = pgTable(\"attendance\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").notNull(),\n  checkIn: timestamp(\"check_in\"),\n  checkOut: timestamp(\"check_out\"),\n  date: timestamp(\"date\").notNull().default(sql`CURRENT_DATE`),\n  location: text(\"location\"),\n  qrCode: text(\"qr_code\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Leave Requests table\nexport const leaveRequests = pgTable(\"leave_requests\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").notNull(),\n  type: leaveTypeEnum(\"type\").notNull(),\n  startDate: timestamp(\"start_date\").notNull(),\n  endDate: timestamp(\"end_date\").notNull(),\n  reason: text(\"reason\"),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, approved, rejected\n  approvedBy: varchar(\"approved_by\"),\n  approvedAt: timestamp(\"approved_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\n// Personnel Documents table\nexport const personnelDocuments = pgTable(\"personnel_documents\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").notNull(),\n  type: documentTypeEnum(\"type\").notNull(),\n  title: text(\"title\").notNull(),\n  fileName: text(\"file_name\").notNull(),\n  filePath: text(\"file_path\").notNull(),\n  expiryDate: timestamp(\"expiry_date\"),\n  isValid: boolean(\"is_valid\").notNull().default(true),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Personnel Financial Info table\nexport const personnelFinancialInfo = pgTable(\"personnel_financial_info\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").notNull().unique(),\n  bankName: text(\"bank_name\"),\n  iban: text(\"iban\"),\n  accountNumber: text(\"account_number\"),\n  taxNumber: text(\"tax_number\"),\n  socialSecurityNumber: text(\"social_security_number\"),\n  emergencyContactName: text(\"emergency_contact_name\"),\n  emergencyContactPhone: text(\"emergency_contact_phone\"),\n  emergencyContactRelation: text(\"emergency_contact_relation\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Personnel Education table\nexport const personnelEducation = pgTable(\"personnel_education\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").notNull(),\n  educationLevel: text(\"education_level\").notNull(), // ilkokul, ortaokul, lise, universite, yuksek_lisans, doktora\n  schoolName: text(\"school_name\").notNull(),\n  department: text(\"department\"),\n  graduationYear: integer(\"graduation_year\"),\n  isCompleted: boolean(\"is_completed\").notNull().default(true),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`gen_random_uuid()`),\n});\n\n// Personnel Leave Balances table\nexport const personnelLeaveBalances = pgTable(\"personnel_leave_balances\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  personnelId: varchar(\"personnel_id\").notNull(),\n  leaveType: leaveTypeEnum(\"leave_type\").notNull(),\n  totalDays: integer(\"total_days\").notNull().default(0),\n  usedDays: integer(\"used_days\").notNull().default(0),\n  remainingDays: integer(\"remaining_days\").notNull().default(0),\n  year: integer(\"year\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ one }) => ({\n  branch: one(branches, {\n    fields: [users.branchId],\n    references: [branches.id],\n  }),\n}));\n\nexport const branchesRelations = relations(branches, ({ one, many }) => ({\n  parentBranch: one(branches, {\n    fields: [branches.parentBranchId],\n    references: [branches.id],\n  }),\n  manager: one(personnel, {\n    fields: [branches.managerId],\n    references: [personnel.id],\n  }),\n  subBranches: many(branches),\n  personnel: many(personnel),\n  users: many(users),\n  shifts: many(shifts),\n}));\n\nexport const personnelRelations = relations(personnel, ({ one, many }) => ({\n  branch: one(branches, {\n    fields: [personnel.branchId],\n    references: [branches.id],\n  }),\n  shifts: many(personnelShifts),\n  attendance: many(attendance),\n  leaveRequests: many(leaveRequests),\n  documents: many(personnelDocuments),\n  financialInfo: one(personnelFinancialInfo),\n  education: many(personnelEducation),\n  leaveBalances: many(personnelLeaveBalances),\n}));\n\nexport const shiftsRelations = relations(shifts, ({ one, many }) => ({\n  branch: one(branches, {\n    fields: [shifts.branchId],\n    references: [branches.id],\n  }),\n  personnel: many(personnelShifts),\n}));\n\nexport const personnelShiftsRelations = relations(personnelShifts, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [personnelShifts.personnelId],\n    references: [personnel.id],\n  }),\n  shift: one(shifts, {\n    fields: [personnelShifts.shiftId],\n    references: [shifts.id],\n  }),\n}));\n\nexport const attendanceRelations = relations(attendance, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [attendance.personnelId],\n    references: [personnel.id],\n  }),\n}));\n\nexport const leaveRequestsRelations = relations(leaveRequests, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [leaveRequests.personnelId],\n    references: [personnel.id],\n  }),\n  approver: one(users, {\n    fields: [leaveRequests.approvedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const personnelDocumentsRelations = relations(personnelDocuments, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [personnelDocuments.personnelId],\n    references: [personnel.id],\n  }),\n}));\n\nexport const personnelFinancialInfoRelations = relations(personnelFinancialInfo, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [personnelFinancialInfo.personnelId],\n    references: [personnel.id],\n  }),\n}));\n\nexport const personnelEducationRelations = relations(personnelEducation, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [personnelEducation.personnelId],\n    references: [personnel.id],\n  }),\n}));\n\nexport const personnelLeaveBalancesRelations = relations(personnelLeaveBalances, ({ one }) => ({\n  personnel: one(personnel, {\n    fields: [personnelLeaveBalances.personnelId],\n    references: [personnel.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  twoFactorCode: true,\n  twoFactorExpiry: true,\n});\n\nexport const insertBranchSchema = createInsertSchema(branches).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertPersonnelSchema = createInsertSchema(personnel).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertShiftSchema = createInsertSchema(shifts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertLeaveRequestSchema = createInsertSchema(leaveRequests).omit({\n  id: true,\n  createdAt: true,\n  approvedBy: true,\n  approvedAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Branch = typeof branches.$inferSelect;\nexport type InsertBranch = z.infer<typeof insertBranchSchema>;\nexport type Personnel = typeof personnel.$inferSelect;\nexport type InsertPersonnel = z.infer<typeof insertPersonnelSchema>;\nexport type Shift = typeof shifts.$inferSelect;\nexport type InsertShift = z.infer<typeof insertShiftSchema>;\nexport type LeaveRequest = typeof leaveRequests.$inferSelect;\nexport type InsertLeaveRequest = z.infer<typeof insertLeaveRequestSchema>;\nexport type Attendance = typeof attendance.$inferSelect;\n\nexport const insertPersonnelDocumentSchema = createInsertSchema(personnelDocuments).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertPersonnelDocument = z.infer<typeof insertPersonnelDocumentSchema>;\nexport type PersonnelDocument = typeof personnelDocuments.$inferSelect;\n\nexport const insertPersonnelFinancialInfoSchema = createInsertSchema(personnelFinancialInfo).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertPersonnelFinancialInfo = z.infer<typeof insertPersonnelFinancialInfoSchema>;\nexport type PersonnelFinancialInfo = typeof personnelFinancialInfo.$inferSelect;\n\nexport const insertPersonnelEducationSchema = createInsertSchema(personnelEducation).omit({\n  id: true,\n  createdAt: true,\n});\nexport type InsertPersonnelEducation = z.infer<typeof insertPersonnelEducationSchema>;\nexport type PersonnelEducation = typeof personnelEducation.$inferSelect;\n\nexport const insertPersonnelLeaveBalanceSchema = createInsertSchema(personnelLeaveBalances).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\nexport type InsertPersonnelLeaveBalance = z.infer<typeof insertPersonnelLeaveBalanceSchema>;\nexport type PersonnelLeaveBalance = typeof personnelLeaveBalances.$inferSelect;\n","size_bytes":12850},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport NotFound from \"@/pages/not-found\";\nimport AuthPage from \"@/pages/auth-page\";\nimport Dashboard from \"@/pages/dashboard\";\nimport PersonnelManagement from \"@/pages/personnel-management\";\nimport BranchManagement from \"@/pages/branch-management\";\nimport ShiftManagement from \"@/pages/shift-management\";\nimport LeaveManagement from \"@/pages/leave-management\";\nimport AttendanceTracking from \"@/pages/attendance-tracking\";\nimport QRControl from \"@/pages/qr-control\";\nimport Reports from \"@/pages/reports\";\nimport SystemSettings from \"@/pages/system-settings\";\nimport CalendarPage from \"@/pages/calendar\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <ProtectedRoute path=\"/\" component={Dashboard} />\n      <ProtectedRoute path=\"/dashboard\" component={Dashboard} />\n      <ProtectedRoute path=\"/personnel\" component={PersonnelManagement} />\n      <ProtectedRoute path=\"/branches\" component={BranchManagement} />\n      <ProtectedRoute path=\"/shifts\" component={ShiftManagement} />\n      <ProtectedRoute path=\"/leave\" component={LeaveManagement} />\n      <ProtectedRoute path=\"/attendance\" component={AttendanceTracking} />\n      <ProtectedRoute path=\"/qr-control\" component={QRControl} />\n      <ProtectedRoute path=\"/reports\" component={Reports} />\n      <ProtectedRoute path=\"/settings\" component={SystemSettings} />\n      <ProtectedRoute path=\"/calendar\" component={CalendarPage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2133},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(210, 40%, 98%);\n  --foreground: hsl(222.2, 84%, 4.9%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(222.2, 84%, 4.9%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(222.2, 84%, 4.9%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(210, 40%, 96%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(210, 40%, 96%);\n  --muted-foreground: hsl(215.4, 16.3%, 46.9%);\n  --accent: hsl(142.1, 76.2%, 36.3%);\n  --accent-foreground: hsl(355.7, 100%, 97.3%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(214.3, 31.8%, 91.4%);\n  --input: hsl(214.3, 31.8%, 91.4%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(222.2, 84%, 4.9%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(210, 40%, 98%);\n  --sidebar-accent: hsl(210, 40%, 96%);\n  --sidebar-accent-foreground: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-border: hsl(214.3, 31.8%, 91.4%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(221.2, 83.2%, 53.3%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(222.2, 84%, 4.9%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(142.1, 76.2%, 36.3%);\n  --accent-foreground: hsl(355.7, 100%, 97.3%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(221.2, 83.2%, 53.3%);\n  --chart-1: hsl(221.2, 83.2%, 53.3%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(221.2, 83.2%, 53.3%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(221.2, 83.2%, 53.3%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 8px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 1px 2px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 2px 4px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 4px 6px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00), 0px 8px 10px -1px hsl(221.2, 83.2%, 53.3%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(221.2, 83.2%, 53.3%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n\n  .sidebar-closed {\n    transform: translateX(-100%);\n  }\n\n  @media (min-width: 768px) {\n    .sidebar-closed {\n      transform: translateX(0);\n      width: 4rem;\n    }\n    .sidebar-closed .sidebar-text {\n      display: none;\n    }\n    .sidebar-closed .sidebar-logo-text {\n      display: none;\n    }\n  }\n}\n","size_bytes":5069},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/netgsm.ts":{"content":"export interface NetgsmConfig {\n  username: string;\n  password: string;\n  title: string;\n}\n\nexport class NetgsmService {\n  private config: NetgsmConfig;\n\n  constructor() {\n    this.config = {\n      username: process.env.NETGSM_USERNAME || '',\n      password: process.env.NETGSM_PASSWORD || '',\n      title: process.env.NETGSM_TITLE || 'PTS',\n    };\n  }\n\n  async sendSMS(phone: string, message: string): Promise<boolean> {\n    try {\n      const url = 'https://api.netgsm.com.tr/sms/send/get';\n      const params = new URLSearchParams({\n        usercode: this.config.username,\n        password: this.config.password,\n        gsmno: phone.replace(/\\D/g, ''), // Remove non-digits\n        message: message,\n        msgheader: this.config.title,\n      });\n\n      const response = await fetch(`${url}?${params}`);\n      const result = await response.text();\n      \n      // Netgsm returns response codes: \n      // \"00\" or \"01\" means success\n      // Other codes mean error\n      return result.startsWith('00') || result.startsWith('01');\n    } catch (error) {\n      console.error('Netgsm SMS gÃ¶nderme hatasÄ±:', error);\n      return false;\n    }\n  }\n\n  async send2FA(phone: string, code: string): Promise<boolean> {\n    const message = `PTS giriÅ doÄrulama kodunuz: ${code}. Bu kodu kimseyle paylaÅmayÄ±n.`;\n    return this.sendSMS(phone, message);\n  }\n}\n\nexport const netgsmService = new NetgsmService();\n","size_bytes":1405},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<any, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n  verify2FAMutation: UseMutationResult<SelectUser, Error, TwoFactorData>;\n};\n\ntype LoginData = Pick<InsertUser, \"phone\" | \"password\">;\ntype TwoFactorData = { userId: string; code: string };\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (response: any) => {\n      if (response.requiresTwoFactor) {\n        toast({\n          title: \"DoÄrulama Kodu GÃ¶nderildi\",\n          description: \"Telefon numaranÄ±za gÃ¶nderilen kodu girin\",\n        });\n      } else {\n        queryClient.setQueryData([\"/api/user\"], response);\n      }\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"GiriÅ BaÅarÄ±sÄ±z\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const verify2FAMutation = useMutation({\n    mutationFn: async (data: TwoFactorData) => {\n      const res = await apiRequest(\"POST\", \"/api/verify-2fa\", data);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"GiriÅ BaÅarÄ±lÄ±\",\n        description: \"HoÅ geldiniz!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"DoÄrulama BaÅarÄ±sÄ±z\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"KayÄ±t BaÅarÄ±lÄ±\",\n        description: \"HesabÄ±nÄ±z oluÅturuldu\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"KayÄ±t BaÅarÄ±sÄ±z\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"ÃÄ±kÄ±Å YapÄ±ldÄ±\",\n        description: \"GÃ¼venli bir Åekilde Ã§Ä±kÄ±Å yaptÄ±nÄ±z\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"ÃÄ±kÄ±Å HatasÄ±\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n        verify2FAMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":4018},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen bg-background\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path}><Component /></Route>;\n}\n","size_bytes":718},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    // Handle query parameters properly\n    const [baseUrl, params] = queryKey;\n    let url = baseUrl as string;\n    \n    if (params && typeof params === 'object') {\n      const searchParams = new URLSearchParams();\n      Object.entries(params).forEach(([key, value]) => {\n        if (value !== undefined && value !== null) {\n          searchParams.append(key, String(value));\n        }\n      });\n      if (searchParams.toString()) {\n        url += '?' + searchParams.toString();\n      }\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1857},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/attendance-tracking.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Calendar, Clock, User, Search, Download, Filter } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport type { Attendance, Personnel, Branch } from \"@shared/schema\";\n\nexport default function AttendanceTracking() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [dateFilter, setDateFilter] = useState(\"today\");\n  const [branchFilter, setBranchFilter] = useState(\"all\");\n\n  const { data: attendance = [], isLoading } = useQuery<Attendance[]>({\n    queryKey: [\"/api/attendance\", { date: dateFilter, branch: branchFilter }],\n  });\n\n  const { data: personnel = [] } = useQuery<Personnel[]>({\n    queryKey: [\"/api/personnel\"],\n  });\n\n  const { data: branches = [] } = useQuery<Branch[]>({\n    queryKey: [\"/api/branches\"],\n  });\n\n  const filteredAttendance = attendance.filter((record) => {\n    const person = personnel.find(p => p.id === record.personnelId);\n    if (!person) return false;\n    \n    const fullName = `${person.firstName} ${person.lastName}`;\n    const searchMatch = fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                       person.employeeNumber.includes(searchTerm);\n    \n    return searchMatch;\n  });\n\n  const calculateWorkHours = (checkIn?: Date | string, checkOut?: Date | string) => {\n    if (!checkIn || !checkOut) return \"Devam ediyor\";\n    \n    const start = new Date(checkIn);\n    const end = new Date(checkOut);\n    const diffMs = end.getTime() - start.getTime();\n    const hours = Math.floor(diffMs / (1000 * 60 * 60));\n    const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));\n    \n    return `${hours}s ${minutes}dk`;\n  };\n\n  const stats = {\n    total: filteredAttendance.length,\n    present: filteredAttendance.filter(a => a.checkInTime && !a.checkOutTime).length,\n    completed: filteredAttendance.filter(a => a.checkInTime && a.checkOutTime).length,\n    late: filteredAttendance.filter(a => {\n      if (!a.checkInTime) return false;\n      const checkIn = new Date(a.checkInTime);\n      const hour = checkIn.getHours();\n      const minute = checkIn.getMinutes();\n      return hour > 9 || (hour === 9 && minute > 0); // 09:00'dan sonra geÃ§\n    }).length\n  };\n\n  if (isLoading) {\n    return (\n      <MainLayout>\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-2 text-muted-foreground\">Devam kayÄ±tlarÄ± yÃ¼kleniyor...</p>\n          </div>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  return (\n    <MainLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Devam Takibi</h1>\n            <p className=\"text-muted-foreground\">DetaylÄ± personel giriÅ-Ã§Ä±kÄ±Å kayÄ±tlarÄ±</p>\n          </div>\n          <Button data-testid=\"button-export-attendance\">\n            <Download className=\"mr-2 h-4 w-4\" />\n            Rapor Ä°ndir\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Toplam KayÄ±t</CardTitle>\n              <User className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-attendance\">{stats.total}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Ä°Å Yerinde</CardTitle>\n              <Clock className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-present-count\">{stats.present}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Tamamlanan</CardTitle>\n              <Calendar className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-completed-count\">{stats.completed}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">GeÃ§ Gelen</CardTitle>\n              <Clock className=\"h-4 w-4 text-red-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-late-count\">{stats.late}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <div className=\"flex flex-col sm:flex-row gap-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Personel adÄ± veya sicil numarasÄ± ile ara...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-8\"\n              data-testid=\"input-search-attendance\"\n            />\n          </div>\n          <Select value={dateFilter} onValueChange={setDateFilter}>\n            <SelectTrigger className=\"w-[180px]\" data-testid=\"select-date-filter\">\n              <SelectValue placeholder=\"Tarih filtresi\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"today\">BugÃ¼n</SelectItem>\n              <SelectItem value=\"yesterday\">DÃ¼n</SelectItem>\n              <SelectItem value=\"this-week\">Bu Hafta</SelectItem>\n              <SelectItem value=\"last-week\">GeÃ§en Hafta</SelectItem>\n              <SelectItem value=\"this-month\">Bu Ay</SelectItem>\n              <SelectItem value=\"last-month\">GeÃ§en Ay</SelectItem>\n            </SelectContent>\n          </Select>\n          <Select value={branchFilter} onValueChange={setBranchFilter}>\n            <SelectTrigger className=\"w-[180px]\" data-testid=\"select-branch-filter\">\n              <SelectValue placeholder=\"Åube filtresi\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">TÃ¼m Åubeler</SelectItem>\n              {branches.map((branch) => (\n                <SelectItem key={branch.id} value={branch.id}>\n                  {branch.name}\n                </SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Attendance Records */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Calendar className=\"mr-2 h-5 w-5\" />\n              Devam KayÄ±tlarÄ±\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {filteredAttendance.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                  <h3 className=\"mt-4 text-lg font-semibold\">KayÄ±t bulunamadÄ±</h3>\n                  <p className=\"text-muted-foreground\">\n                    {searchTerm ? \"Arama kriterlerinize uygun\" : \"SeÃ§ilen filtrelere uygun\"} devam kaydÄ± bulunmuyor.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {filteredAttendance.map((record) => {\n                    const person = personnel.find(p => p.id === record.personnelId);\n                    const branch = branches.find(b => b.id === person?.branchId);\n                    if (!person) return null;\n                    \n                    const fullName = `${person.firstName} ${person.lastName}`;\n                    const isPresent = record.checkInTime && !record.checkOutTime;\n                    const isLate = record.checkInTime ? \n                      new Date(record.checkInTime).getHours() > 9 || \n                      (new Date(record.checkInTime).getHours() === 9 && new Date(record.checkInTime).getMinutes() > 0) \n                      : false;\n                    \n                    return (\n                      <div \n                        key={record.id} \n                        className=\"border rounded-lg p-4\"\n                        data-testid={`card-attendance-record-${record.id}`}\n                      >\n                        <div className=\"flex items-center justify-between mb-3\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div>\n                              <h3 className=\"font-semibold\">{fullName}</h3>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {person.employeeNumber} â¢ {person.position} â¢ {branch?.name || \"AtanmamÄ±Å\"}\n                              </p>\n                            </div>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            {isPresent && (\n                              <Badge className=\"bg-green-500 hover:bg-green-600\">\n                                Ä°Å Yerinde\n                              </Badge>\n                            )}\n                            {isLate && (\n                              <Badge variant=\"destructive\">\n                                GeÃ§ Gelen\n                              </Badge>\n                            )}\n                            {record.checkOutTime && (\n                              <Badge variant=\"secondary\">\n                                ÃÄ±kÄ±Å Yapan\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 text-sm\">\n                          <div>\n                            <span className=\"font-medium\">Tarih:</span>\n                            <p className=\"text-muted-foreground\">\n                              {new Date(record.date).toLocaleDateString('tr-TR')}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">GiriÅ Saati:</span>\n                            <p className=\"text-muted-foreground\">\n                              {record.checkInTime ? \n                                new Date(record.checkInTime).toLocaleTimeString('tr-TR', {\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                }) : \n                                \"HenÃ¼z giriÅ yapmadÄ±\"\n                              }\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">ÃÄ±kÄ±Å Saati:</span>\n                            <p className=\"text-muted-foreground\">\n                              {record.checkOutTime ? \n                                new Date(record.checkOutTime).toLocaleTimeString('tr-TR', {\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                }) : \n                                \"HenÃ¼z Ã§Ä±kÄ±Å yapmadÄ±\"\n                              }\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">ÃalÄ±Åma SÃ¼resi:</span>\n                            <p className=\"text-muted-foreground\">\n                              {calculateWorkHours(record.checkInTime, record.checkOutTime)}\n                            </p>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":12835},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Redirect } from \"wouter\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { InputOTP, InputOTPGroup, InputOTPSlot } from \"@/components/ui/input-otp\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { insertUserSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { Users, Building, Clock, Shield, Eye, EyeOff } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nconst loginSchema = z.object({\n  phone: z.string().min(10, \"Telefon numarasÄ± en az 10 karakter olmalÄ±dÄ±r\"),\n  password: z.string().min(6, \"Åifre en az 6 karakter olmalÄ±dÄ±r\"),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\ntype RegisterForm = z.infer<typeof insertUserSchema>;\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation, verify2FAMutation } = useAuth();\n  const [showTwoFactor, setShowTwoFactor] = useState(false);\n  const [pendingUserId, setPendingUserId] = useState<string>(\"\");\n  const [twoFactorCode, setTwoFactorCode] = useState(\"\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showRegisterPassword, setShowRegisterPassword] = useState(false);\n\n  // Fetch branches for registration\n  const { data: branches = [] } = useQuery({\n    queryKey: [\"/api/branches\"],\n    enabled: false, // Only fetch when needed\n  });\n\n  const loginForm = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      phone: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterForm>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      phone: \"\",\n      password: \"\",\n      name: \"\",\n      role: \"branch_admin\",\n      branchId: \"\",\n      isActive: true,\n    },\n  });\n\n  // Redirect if already logged in\n  if (user) {\n    return <Redirect to=\"/\" />;\n  }\n\n  const handleLogin = (data: LoginForm) => {\n    loginMutation.mutate(data, {\n      onSuccess: (response) => {\n        if (response.requiresTwoFactor) {\n          setShowTwoFactor(true);\n          setPendingUserId(response.userId);\n        }\n      },\n    });\n  };\n\n  const handleRegister = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  const handleTwoFactorSubmit = () => {\n    if (twoFactorCode.length === 6) {\n      verify2FAMutation.mutate({\n        userId: pendingUserId,\n        code: twoFactorCode,\n      });\n    }\n  };\n\n  const handleTwoFactorKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && twoFactorCode.length === 6) {\n      handleTwoFactorSubmit();\n    }\n  };\n\n  // Auto-submit when 2FA code is complete\n  const handleTwoFactorChange = (value: string) => {\n    setTwoFactorCode(value);\n    if (value.length === 6) {\n      setTimeout(() => {\n        verify2FAMutation.mutate({\n          userId: pendingUserId,\n          code: value,\n        });\n      }, 100);\n    }\n  };\n\n  if (showTwoFactor) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background p-4\">\n        <Card className=\"w-full max-w-md\">\n          <CardHeader className=\"text-center\">\n            <CardTitle className=\"text-2xl\">DoÄrulama Kodu</CardTitle>\n            <CardDescription>\n              Telefon numaranÄ±za gÃ¶nderilen 6 haneli kodu girin\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-6\">\n            <div className=\"flex justify-center\">\n              <InputOTP\n                maxLength={6}\n                value={twoFactorCode}\n                onChange={handleTwoFactorChange}\n                onKeyDown={handleTwoFactorKeyPress}\n                data-testid=\"input-2fa-code\"\n              >\n                <InputOTPGroup>\n                  <InputOTPSlot index={0} />\n                  <InputOTPSlot index={1} />\n                  <InputOTPSlot index={2} />\n                  <InputOTPSlot index={3} />\n                  <InputOTPSlot index={4} />\n                  <InputOTPSlot index={5} />\n                </InputOTPGroup>\n              </InputOTP>\n            </div>\n            <Button \n              onClick={handleTwoFactorSubmit}\n              className=\"w-full\"\n              disabled={twoFactorCode.length !== 6 || verify2FAMutation.isPending}\n              data-testid=\"button-verify-2fa\"\n            >\n              {verify2FAMutation.isPending ? \"DoÄrulanÄ±yor...\" : \"DoÄrula\"}\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setShowTwoFactor(false);\n                setTwoFactorCode(\"\");\n                setPendingUserId(\"\");\n              }}\n              className=\"w-full\"\n              data-testid=\"button-back-to-login\"\n            >\n              Geri DÃ¶n\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen grid lg:grid-cols-2\">\n      {/* Left side - Forms */}\n      <div className=\"flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md space-y-6\">\n          <div className=\"text-center\">\n            <div className=\"flex items-center justify-center space-x-2 mb-4\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Users className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              <h1 className=\"text-2xl font-bold\">PTS</h1>\n            </div>\n            <h2 className=\"text-xl text-muted-foreground\">Personel Takip Sistemi</h2>\n          </div>\n\n          <Tabs defaultValue=\"login\" className=\"space-y-4\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"login\" data-testid=\"tab-login\">GiriÅ Yap</TabsTrigger>\n              <TabsTrigger value=\"register\" data-testid=\"tab-register\">KayÄ±t Ol</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>GiriÅ Yap</CardTitle>\n                  <CardDescription>\n                    Telefon numaranÄ±z ve Åifrenizle giriÅ yapÄ±n\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...loginForm}>\n                    <form onSubmit={loginForm.handleSubmit(handleLogin)} className=\"space-y-4\">\n                      <FormField\n                        control={loginForm.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Telefon NumarasÄ±</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"05xxxxxxxxx\"\n                                {...field}\n                                data-testid=\"input-login-phone\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={loginForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Åifre</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  type={showPassword ? \"text\" : \"password\"}\n                                  placeholder=\"Åifrenizi girin\"\n                                  {...field}\n                                  data-testid=\"input-login-password\"\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowPassword(!showPassword)}\n                                  data-testid=\"button-toggle-password\"\n                                >\n                                  {showPassword ? (\n                                    <EyeOff className=\"h-4 w-4\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full\"\n                        disabled={loginMutation.isPending}\n                        data-testid=\"button-login-submit\"\n                      >\n                        {loginMutation.isPending ? \"GiriÅ yapÄ±lÄ±yor...\" : \"GiriÅ Yap\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>KayÄ±t Ol</CardTitle>\n                  <CardDescription>\n                    Yeni hesap oluÅturun\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Form {...registerForm}>\n                    <form onSubmit={registerForm.handleSubmit(handleRegister)} className=\"space-y-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Ad Soyad</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"Ad Soyad\"\n                                {...field}\n                                data-testid=\"input-register-name\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"phone\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Telefon NumarasÄ±</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"05xxxxxxxxx\"\n                                {...field}\n                                data-testid=\"input-register-phone\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"password\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Åifre</FormLabel>\n                            <FormControl>\n                              <div className=\"relative\">\n                                <Input\n                                  type={showRegisterPassword ? \"text\" : \"password\"}\n                                  placeholder=\"Åifrenizi girin\"\n                                  {...field}\n                                  data-testid=\"input-register-password\"\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                  onClick={() => setShowRegisterPassword(!showRegisterPassword)}\n                                  data-testid=\"button-toggle-register-password\"\n                                >\n                                  {showRegisterPassword ? (\n                                    <EyeOff className=\"h-4 w-4\" />\n                                  ) : (\n                                    <Eye className=\"h-4 w-4\" />\n                                  )}\n                                </Button>\n                              </div>\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={registerForm.control}\n                        name=\"role\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Rol</FormLabel>\n                            <Select onValueChange={field.onChange} defaultValue={field.value}>\n                              <FormControl>\n                                <SelectTrigger data-testid=\"select-register-role\">\n                                  <SelectValue placeholder=\"Rol seÃ§in\" />\n                                </SelectTrigger>\n                              </FormControl>\n                              <SelectContent>\n                                <SelectItem value=\"super_admin\">SÃ¼per Admin</SelectItem>\n                                <SelectItem value=\"admin\">Admin</SelectItem>\n                                <SelectItem value=\"branch_admin\">Åube Admin</SelectItem>\n                              </SelectContent>\n                            </Select>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full\"\n                        disabled={registerMutation.isPending}\n                        data-testid=\"button-register-submit\"\n                      >\n                        {registerMutation.isPending ? \"KayÄ±t yapÄ±lÄ±yor...\" : \"KayÄ±t Ol\"}\n                      </Button>\n                    </form>\n                  </Form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right side - Hero */}\n      <div className=\"hidden lg:flex lg:items-center lg:justify-center bg-primary text-primary-foreground p-8\">\n        <div className=\"max-w-md text-center space-y-6\">\n          <h1 className=\"text-4xl font-bold\">Personel YÃ¶netimi</h1>\n          <p className=\"text-lg text-primary-foreground/80\">\n            KapsamlÄ± personel takip ve yÃ¶netim sistemi ile iÅletmenizi daha verimli hale getirin.\n          </p>\n          \n          <div className=\"grid grid-cols-2 gap-4 mt-8\">\n            <div className=\"text-center p-4\">\n              <Building className=\"w-8 h-8 mx-auto mb-2\" />\n              <h3 className=\"font-medium\">Åube YÃ¶netimi</h3>\n              <p className=\"text-sm text-primary-foreground/70\">Ãoklu Åube desteÄi</p>\n            </div>\n            <div className=\"text-center p-4\">\n              <Clock className=\"w-8 h-8 mx-auto mb-2\" />\n              <h3 className=\"font-medium\">Vardiya Takibi</h3>\n              <p className=\"text-sm text-primary-foreground/70\">Otomatik vardiya yÃ¶netimi</p>\n            </div>\n            <div className=\"text-center p-4\">\n              <Users className=\"w-8 h-8 mx-auto mb-2\" />\n              <h3 className=\"font-medium\">Personel Takibi</h3>\n              <p className=\"text-sm text-primary-foreground/70\">KapsamlÄ± personel bilgileri</p>\n            </div>\n            <div className=\"text-center p-4\">\n              <Shield className=\"w-8 h-8 mx-auto mb-2\" />\n              <h3 className=\"font-medium\">GÃ¼venli GiriÅ</h3>\n              <p className=\"text-sm text-primary-foreground/70\">2FA ile gÃ¼venli eriÅim</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":16900},"client/src/pages/branch-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DetailModal } from \"@/components/modals/detail-modal\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Branch, InsertBranch, insertBranchSchema, Personnel } from \"@shared/schema\";\nimport { Plus, Building, MapPin, Phone, Edit, Eye, Trash2 } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst branchFormSchema = insertBranchSchema.extend({\n  name: z.string().min(2, \"Åube adÄ± en az 2 karakter olmalÄ±dÄ±r\"),\n  phone: z.string().optional(),\n  address: z.string().optional(),\n  managerId: z.string().optional(),\n});\n\ntype BranchForm = z.infer<typeof branchFormSchema>;\n\nexport default function BranchManagement() {\n  const [selectedBranch, setSelectedBranch] = useState<Branch | null>(null);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: branches = [], isLoading: branchesLoading } = useQuery<Branch[]>({\n    queryKey: [\"/api/branches\"],\n  });\n\n  const { data: personnel = [] } = useQuery<Personnel[]>({\n    queryKey: [\"/api/personnel\"],\n  });\n\n  const form = useForm<BranchForm>({\n    resolver: zodResolver(branchFormSchema),\n    defaultValues: {\n      name: \"\",\n      address: \"\",\n      phone: \"\",\n      parentBranchId: \"\",\n      managerId: \"\",\n      isActive: true,\n    },\n  });\n\n  const createBranchMutation = useMutation({\n    mutationFn: async (data: InsertBranch) => {\n      const res = await apiRequest(\"POST\", \"/api/branches\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/branches\"] });\n      setShowAddModal(false);\n      form.reset();\n      toast({\n        title: \"BaÅarÄ±lÄ±\",\n        description: \"Åube baÅarÄ±yla eklendi\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateBranchMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Branch> }) => {\n      const res = await apiRequest(\"PUT\", `/api/branches/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/branches\"] });\n      setShowEditModal(false);\n      setSelectedBranch(null);\n      form.reset();\n      toast({\n        title: \"BaÅarÄ±lÄ±\",\n        description: \"Åube baÅarÄ±yla gÃ¼ncellendi\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddBranch = (data: BranchForm) => {\n    const processedData = {\n      ...data,\n      parentBranchId: data.parentBranchId === \"no-parent\" ? null : data.parentBranchId,\n      managerId: data.managerId === \"no-manager\" ? null : data.managerId,\n    };\n    createBranchMutation.mutate(processedData);\n  };\n\n  const handleEditBranch = (data: BranchForm) => {\n    if (selectedBranch) {\n      const processedData = {\n        ...data,\n        parentBranchId: data.parentBranchId === \"no-parent\" ? null : data.parentBranchId,\n        managerId: data.managerId === \"no-manager\" ? null : data.managerId,\n      };\n      updateBranchMutation.mutate({\n        id: selectedBranch.id,\n        data: processedData,\n      });\n    }\n  };\n\n  const openAddModal = () => {\n    form.reset();\n    setShowAddModal(true);\n  };\n\n  const openEditModal = (branch: Branch) => {\n    setSelectedBranch(branch);\n    form.reset({\n      name: branch.name,\n      address: branch.address || \"\",\n      phone: branch.phone || \"\",\n      parentBranchId: branch.parentBranchId || \"\",\n      managerId: branch.managerId || \"\",\n      isActive: branch.isActive,\n    });\n    setShowEditModal(true);\n  };\n\n  // Filter parent branches (exclude sub-branches for parent selection)\n  const parentBranches = branches.filter(branch => !branch.parentBranchId);\n\n  const canManageBranches = user?.role === 'super_admin' || user?.role === 'admin';\n\n  // Helper function to get manager name\n  const getManagerName = (managerId: string | null) => {\n    if (!managerId) return \"AtanmamÄ±Å\";\n    const manager = personnel.find(p => p.id === managerId);\n    return manager ? `${manager.firstName} ${manager.lastName}` : \"Bilinmeyen\";\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Åube YÃ¶netimi</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Åubelerinizi ve alt Åubelerinizi yÃ¶netin\n            </p>\n          </div>\n          {canManageBranches && (\n            <Button onClick={openAddModal} data-testid=\"button-add-branch\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Yeni Åube\n            </Button>\n          )}\n        </div>\n\n        {/* Branches Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {branchesLoading ? (\n            // Loading skeletons\n            Array.from({ length: 6 }).map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-3\">\n                    <div className=\"h-4 bg-muted rounded w-3/4\" />\n                    <div className=\"h-3 bg-muted rounded w-1/2\" />\n                    <div className=\"h-3 bg-muted rounded w-2/3\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : branches.length === 0 ? (\n            <div className=\"col-span-full text-center py-12\">\n              <Building className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground\">HenÃ¼z Åube eklenmemiÅ</p>\n              {canManageBranches && (\n                <Button onClick={openAddModal} className=\"mt-4\" data-testid=\"button-add-first-branch\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Ä°lk Åubeyi Ekle\n                </Button>\n              )}\n            </div>\n          ) : (\n            branches.map((branch) => (\n              <Card\n                key={branch.id}\n                className=\"cursor-pointer hover:shadow-lg transition-shadow\"\n                onClick={() => setSelectedBranch(branch)}\n                data-testid={`card-branch-${branch.id}`}\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex items-start space-x-3\">\n                        <div className=\"w-10 h-10 bg-primary/10 rounded-lg flex items-center justify-center\">\n                          <Building className=\"w-5 h-5 text-primary\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold text-lg\">{branch.name}</h3>\n                          {branch.parentBranchId && (\n                            <Badge variant=\"secondary\" className=\"mt-1\">\n                              Alt Åube\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                      <Badge variant={branch.isActive ? \"default\" : \"secondary\"}>\n                        {branch.isActive ? \"Aktif\" : \"Pasif\"}\n                      </Badge>\n                    </div>\n\n                    {branch.address && (\n                      <div className=\"flex items-start space-x-2\">\n                        <MapPin className=\"w-4 h-4 text-muted-foreground mt-0.5\" />\n                        <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                          {branch.address}\n                        </p>\n                      </div>\n                    )}\n\n                    {branch.phone && (\n                      <div className=\"flex items-center space-x-2\">\n                        <Phone className=\"w-4 h-4 text-muted-foreground\" />\n                        <p className=\"text-sm text-muted-foreground\">\n                          {branch.phone}\n                        </p>\n                      </div>\n                    )}\n\n                    <div className=\"flex space-x-2 pt-2\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={(e) => {\n                          e.stopPropagation();\n                          setSelectedBranch(branch);\n                        }}\n                        data-testid={`button-view-${branch.id}`}\n                      >\n                        <Eye className=\"w-4 h-4 mr-1\" />\n                        GÃ¶rÃ¼ntÃ¼le\n                      </Button>\n                      {canManageBranches && (\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            openEditModal(branch);\n                          }}\n                          data-testid={`button-edit-${branch.id}`}\n                        >\n                          <Edit className=\"w-4 h-4 mr-1\" />\n                          DÃ¼zenle\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n\n      {/* Branch Detail Modal */}\n      <DetailModal\n        open={!!selectedBranch && !showEditModal}\n        onOpenChange={(open) => !open && setSelectedBranch(null)}\n        title=\"Åube DetaylarÄ±\"\n      >\n        {selectedBranch && (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Åube AdÄ±</label>\n                <p className=\"mt-1 text-foreground\">{selectedBranch.name}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Durum</label>\n                <Badge variant={selectedBranch.isActive ? \"default\" : \"secondary\"} className=\"mt-1\">\n                  {selectedBranch.isActive ? \"Aktif\" : \"Pasif\"}\n                </Badge>\n              </div>\n              {selectedBranch.address && (\n                <div className=\"col-span-2\">\n                  <label className=\"text-sm font-medium text-muted-foreground\">Adres</label>\n                  <p className=\"mt-1 text-foreground\">{selectedBranch.address}</p>\n                </div>\n              )}\n              {selectedBranch.phone && (\n                <div>\n                  <label className=\"text-sm font-medium text-muted-foreground\">Telefon</label>\n                  <p className=\"mt-1 text-foreground\">{selectedBranch.phone}</p>\n                </div>\n              )}\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Åube YÃ¶neticisi</label>\n                <p className=\"mt-1 text-foreground\">\n                  {getManagerName(selectedBranch.managerId)}\n                </p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">OluÅturulma Tarihi</label>\n                <p className=\"mt-1 text-foreground\">\n                  {new Date(selectedBranch.createdAt).toLocaleDateString('tr-TR')}\n                </p>\n              </div>\n            </div>\n\n            {canManageBranches && (\n              <div className=\"flex space-x-3\">\n                <Button\n                  onClick={() => openEditModal(selectedBranch)}\n                  data-testid=\"button-edit-branch\"\n                >\n                  DÃ¼zenle\n                </Button>\n                <Button variant=\"secondary\" data-testid=\"button-view-branch-personnel\">\n                  Personel Listesi\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n      </DetailModal>\n\n      {/* Add/Edit Branch Modal */}\n      <DetailModal\n        open={showAddModal || showEditModal}\n        onOpenChange={(open) => {\n          if (!open) {\n            setShowAddModal(false);\n            setShowEditModal(false);\n            setSelectedBranch(null);\n            form.reset();\n          }\n        }}\n        title={showEditModal ? \"Åube DÃ¼zenle\" : \"Yeni Åube Ekle\"}\n      >\n        <Form {...form}>\n          <form\n            onSubmit={form.handleSubmit(showEditModal ? handleEditBranch : handleAddBranch)}\n            className=\"space-y-6\"\n          >\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Åube AdÄ± *</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Åube adÄ±nÄ± girin\"\n                      {...field}\n                      data-testid=\"input-branch-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"parentBranchId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Ana Åube</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-parent-branch\">\n                        <SelectValue placeholder=\"Ana Åube seÃ§in (isteÄe baÄlÄ±)\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"no-parent\">Ana Åube Yok</SelectItem>\n                      {parentBranches.map((branch) => (\n                        <SelectItem key={branch.id} value={branch.id}>\n                          {branch.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"address\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Adres</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Åube adresini girin\"\n                      {...field}\n                      data-testid=\"input-branch-address\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"phone\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Telefon</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"0212 xxx xx xx\"\n                      {...field}\n                      data-testid=\"input-branch-phone\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"managerId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Åube YÃ¶neticisi</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value || \"\"}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-branch-manager\">\n                        <SelectValue placeholder=\"Åube yÃ¶neticisi seÃ§in (isteÄe baÄlÄ±)\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"no-manager\">YÃ¶netici AtanmamÄ±Å</SelectItem>\n                      {personnel.map((person) => (\n                        <SelectItem key={person.id} value={person.id}>\n                          {person.firstName} {person.lastName} - {person.position}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3\">\n              <Button\n                type=\"submit\"\n                disabled={createBranchMutation.isPending || updateBranchMutation.isPending}\n                data-testid=\"button-submit-branch\"\n              >\n                {createBranchMutation.isPending || updateBranchMutation.isPending\n                  ? \"Kaydediliyor...\"\n                  : showEditModal\n                  ? \"GÃ¼ncelle\"\n                  : \"Ekle\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setShowAddModal(false);\n                  setShowEditModal(false);\n                  setSelectedBranch(null);\n                  form.reset();\n                }}\n                data-testid=\"button-cancel-branch\"\n              >\n                Ä°ptal\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DetailModal>\n    </MainLayout>\n  );\n}\n","size_bytes":18537},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport { StatsCard } from \"@/components/ui/stats-card\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { DetailModal } from \"@/components/modals/detail-modal\";\nimport { useState } from \"react\";\nimport { \n  Users, \n  CheckCircle, \n  Calendar, \n  Clock,\n  Plus,\n  TrendingUp\n} from \"lucide-react\";\n\ninterface Stats {\n  totalPersonnel: number;\n  todayAttendance: number;\n  onLeave: number;\n  activeShifts: number;\n}\n\ninterface Activity {\n  id: string;\n  employee: string;\n  action: string;\n  time: string;\n  type: 'attendance' | 'leave' | 'shift';\n}\n\nexport default function Dashboard() {\n  const [selectedModal, setSelectedModal] = useState<string | null>(null);\n\n  const { data: stats, isLoading: statsLoading } = useQuery<Stats>({\n    queryKey: [\"/api/stats\"],\n  });\n\n  // Mock recent activities - in real app this would come from API\n  const recentActivities: Activity[] = [\n    {\n      id: \"1\",\n      employee: \"Ahmet YÄ±lmaz\",\n      action: \"iÅe giriÅ yaptÄ±\",\n      time: \"2 dakika Ã¶nce\",\n      type: \"attendance\"\n    },\n    {\n      id: \"2\", \n      employee: \"Fatma Demir\",\n      action: \"yÄ±llÄ±k izin talebinde bulundu\",\n      time: \"15 dakika Ã¶nce\",\n      type: \"leave\"\n    },\n    {\n      id: \"3\",\n      employee: \"Mehmet Kaya\", \n      action: \"vardiya deÄiÅikliÄi yapÄ±ldÄ±\",\n      time: \"1 saat Ã¶nce\",\n      type: \"shift\"\n    }\n  ];\n\n  const getActivityIcon = (type: Activity['type']) => {\n    switch (type) {\n      case 'attendance': return <CheckCircle className=\"w-4 h-4 text-accent\" />;\n      case 'leave': return <Calendar className=\"w-4 h-4 text-orange-500\" />;\n      case 'shift': return <Clock className=\"w-4 h-4 text-primary\" />;\n    }\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"space-y-8\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <StatsCard\n            title=\"Toplam Personel\"\n            value={statsLoading ? \"...\" : stats?.totalPersonnel || 0}\n            description=\"+12 bu ay\"\n            icon={Users}\n            iconColor=\"text-primary\"\n            onClick={() => setSelectedModal(\"stats\")}\n          />\n          <StatsCard\n            title=\"BugÃ¼n Ä°Åe Gelen\"\n            value={statsLoading ? \"...\" : stats?.todayAttendance || 0}\n            description={statsLoading ? \"...\" : `%${stats?.totalPersonnel ? Math.round((stats.todayAttendance / stats.totalPersonnel) * 100) : 0} katÄ±lÄ±m`}\n            icon={CheckCircle}\n            iconColor=\"text-accent\"\n            onClick={() => setSelectedModal(\"attendance\")}\n          />\n          <StatsCard\n            title=\"Ä°zinli Personel\"\n            value={statsLoading ? \"...\" : stats?.onLeave || 0}\n            description=\"8 yÄ±llÄ±k izin\"\n            icon={Calendar}\n            iconColor=\"text-orange-500\"\n            onClick={() => setSelectedModal(\"leave\")}\n          />\n          <StatsCard\n            title=\"Aktif Vardiya\"\n            value={statsLoading ? \"...\" : stats?.activeShifts || 0}\n            description=\"3 farklÄ± vardiya\"\n            icon={Clock}\n            iconColor=\"text-purple-500\"\n            onClick={() => setSelectedModal(\"shift\")}\n          />\n        </div>\n\n        {/* Quick Actions & Recent Activity */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Quick Actions */}\n          <div className=\"lg:col-span-1\">\n            <Card>\n              <CardHeader>\n                <CardTitle>HÄ±zlÄ± Ä°Ålemler</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                <Button className=\"w-full justify-start\" data-testid=\"button-add-personnel\">\n                  <Plus className=\"w-5 h-5 mr-2\" />\n                  Yeni Personel Ekle\n                </Button>\n                <Button variant=\"secondary\" className=\"w-full justify-start\" data-testid=\"button-assign-shift\">\n                  <Clock className=\"w-5 h-5 mr-2\" />\n                  Vardiya Atama\n                </Button>\n                <Button variant=\"secondary\" className=\"w-full justify-start\" data-testid=\"button-leave-request\">\n                  <Calendar className=\"w-5 h-5 mr-2\" />\n                  Ä°zin Talebi\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Activity */}\n          <div className=\"lg:col-span-2\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle>Son Aktiviteler</CardTitle>\n                <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-activities\">\n                  TÃ¼mÃ¼nÃ¼ GÃ¶r\n                </Button>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {recentActivities.map((activity) => (\n                  <div\n                    key={activity.id}\n                    className=\"flex items-start space-x-3 cursor-pointer hover:bg-muted/50 p-2 rounded-lg transition-colors\"\n                    onClick={() => setSelectedModal(\"activity-detail\")}\n                    data-testid={`activity-${activity.id}`}\n                  >\n                    <div className=\"w-8 h-8 bg-accent/10 rounded-full flex items-center justify-center flex-shrink-0\">\n                      {getActivityIcon(activity.type)}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p className=\"text-sm\">\n                        <span className=\"font-medium\">{activity.employee}</span>{\" \"}\n                        <span>{activity.action}</span>\n                      </p>\n                      <p className=\"text-xs text-muted-foreground\">{activity.time}</p>\n                    </div>\n                  </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Charts & Tables */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Attendance Chart */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle>Devam GrafiÄi</CardTitle>\n              <select className=\"text-sm border border-border rounded-lg px-3 py-1 bg-background\">\n                <option>Son 7 gÃ¼n</option>\n                <option>Son 30 gÃ¼n</option>\n                <option>Son 3 ay</option>\n              </select>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 bg-muted/30 rounded-lg flex items-center justify-center\">\n                <div className=\"text-center\">\n                  <TrendingUp className=\"w-12 h-12 mx-auto text-muted-foreground mb-2\" />\n                  <p className=\"text-muted-foreground\">Grafik verileri yÃ¼kleniyor...</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recent Employees */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle>Yeni Personeller</CardTitle>\n              <Button variant=\"ghost\" size=\"sm\" data-testid=\"button-view-all-personnel\">\n                TÃ¼mÃ¼nÃ¼ GÃ¶r\n              </Button>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              {/* Mock recent employees */}\n              {[\n                { name: \"AyÅe YÄ±lmaz\", position: \"Frontend Developer\", joinDate: \"12.01.2024\", initials: \"AY\" },\n                { name: \"Murat Koca\", position: \"UI/UX Designer\", joinDate: \"10.01.2024\", initials: \"MK\" },\n                { name: \"Elif DaÄ\", position: \"Backend Developer\", joinDate: \"08.01.2024\", initials: \"ED\" },\n              ].map((employee, index) => (\n                <div\n                  key={index}\n                  className=\"flex items-center space-x-3 p-3 rounded-lg hover:bg-muted/50 cursor-pointer transition-colors\"\n                  onClick={() => setSelectedModal(\"employee-detail\")}\n                  data-testid={`employee-${index}`}\n                >\n                  <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center\">\n                    <span className=\"text-sm font-medium text-white\">\n                      {employee.initials}\n                    </span>\n                  </div>\n                  <div className=\"flex-1\">\n                    <p className=\"font-medium text-sm\">{employee.name}</p>\n                    <p className=\"text-xs text-muted-foreground\">{employee.position}</p>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className=\"text-xs text-muted-foreground\">{employee.joinDate}</p>\n                    <span className=\"inline-block w-2 h-2 bg-accent rounded-full\" />\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Modals */}\n      <DetailModal\n        open={selectedModal === \"stats\"}\n        onOpenChange={(open) => !open && setSelectedModal(null)}\n        title=\"Personel Ä°statistikleri\"\n      >\n        <div className=\"grid grid-cols-2 gap-4\">\n          <div>\n            <label className=\"text-sm font-medium text-muted-foreground\">Toplam Personel</label>\n            <p className=\"mt-1 text-foreground\">{stats?.totalPersonnel || 0}</p>\n          </div>\n          <div>\n            <label className=\"text-sm font-medium text-muted-foreground\">Aktif Personel</label>\n            <p className=\"mt-1 text-foreground\">{stats?.todayAttendance || 0}</p>\n          </div>\n        </div>\n      </DetailModal>\n\n      <DetailModal\n        open={selectedModal === \"employee-detail\"}\n        onOpenChange={(open) => !open && setSelectedModal(null)}\n        title=\"Personel DetaylarÄ±\"\n      >\n        <div className=\"space-y-4\">\n          <div className=\"grid grid-cols-2 gap-4\">\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">Ad Soyad</label>\n              <p className=\"mt-1 text-foreground\">Ahmet YÄ±lmaz</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium text-muted-foreground\">Pozisyon</label>\n              <p className=\"mt-1 text-foreground\">Frontend Developer</p>\n            </div>\n          </div>\n          <div className=\"flex space-x-3 pt-4\">\n            <Button data-testid=\"button-edit-employee\">DÃ¼zenle</Button>\n            <Button variant=\"secondary\" data-testid=\"button-view-report\">Raporla</Button>\n          </div>\n        </div>\n      </DetailModal>\n    </MainLayout>\n  );\n}\n","size_bytes":10730},"client/src/pages/leave-management.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Plus, Search, Calendar, Clock, User, FileText, AlertTriangle, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport type { LeaveRequest, Personnel, InsertLeaveRequest, insertLeaveRequestSchema, PersonnelLeaveBalance } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Diyanet'ten Ã§ekilen dini gÃ¼nler ve resmi tatiller\nconst HOLIDAYS = {\n  // Resmi tatiller - 2025 TÃ¼rkiye Resmi Tatil GÃ¼nleri\n  \"2025-01-01\": \"YÄ±lbaÅÄ±\",\n  \"2025-04-23\": \"Ulusal Egemenlik ve Ãocuk BayramÄ±\",\n  \"2025-05-01\": \"Ä°ÅÃ§i BayramÄ±\",\n  \"2025-05-19\": \"AtatÃ¼rk'Ã¼ Anma, GenÃ§lik ve Spor BayramÄ±\",\n  \"2025-07-15\": \"Demokrasi ve Milli Birlik GÃ¼nÃ¼\",\n  \"2025-08-30\": \"Zafer BayramÄ±\",\n  \"2025-10-28\": \"Cumhuriyet BayramÄ± Arifesi (YarÄ±m GÃ¼n)\",\n  \"2025-10-29\": \"Cumhuriyet BayramÄ±\",\n  // Dini bayramlar (resmi tatil) - 2025 tarihlerine gÃ¶re gÃ¼ncellenmiÅ\n  \"2025-03-29\": \"Ramazan BayramÄ± Arifesi (YarÄ±m GÃ¼n)\",\n  \"2025-03-30\": \"Ramazan BayramÄ± 1. GÃ¼n\",\n  \"2025-03-31\": \"Ramazan BayramÄ± 2. GÃ¼n\",\n  \"2025-04-01\": \"Ramazan BayramÄ± 3. GÃ¼n\",\n  \"2025-06-05\": \"Kurban BayramÄ± Arifesi (YarÄ±m GÃ¼n)\",\n  \"2025-06-06\": \"Kurban BayramÄ± 1. GÃ¼n\",\n  \"2025-06-07\": \"Kurban BayramÄ± 2. GÃ¼n\",\n  \"2025-06-08\": \"Kurban BayramÄ± 3. GÃ¼n\",\n  \"2025-06-09\": \"Kurban BayramÄ± 4. GÃ¼n\",\n};\n\nconst RELIGIOUS_DAYS = {\n  \"2025-01-01\": \"ÃÃ§ AylarÄ±n BaÅlangÄ±cÄ±\",\n  \"2025-01-02\": \"Regaib Kandili\", \n  \"2025-01-26\": \"Mirac Kandili\",\n  \"2025-02-13\": \"Berat Kandili\",\n  \"2025-03-01\": \"Ramazan BaÅlangÄ±cÄ±\",\n  \"2025-03-26\": \"Kadir Gecesi\",\n  \"2025-03-29\": \"Arefe (Ramazan)\",\n  \"2025-06-05\": \"Arefe (Kurban)\",\n  \"2025-06-26\": \"Hicri YÄ±lbaÅÄ±\",\n  \"2025-07-05\": \"AÅure GÃ¼nÃ¼\",\n  \"2025-09-03\": \"Mevlid Kandili\",\n  \"2025-12-21\": \"ÃÃ§ AylarÄ±n BaÅlangÄ±cÄ± (1447)\",\n  \"2025-12-25\": \"Regaib Kandili (1447)\",\n};\n\nconst SPECIAL_DAYS = {\n  \"2025-09-15\": \"Åirket KuruluÅ YÄ±ldÃ¶nÃ¼mÃ¼\",\n  \"2025-12-31\": \"YÄ±lsonu ToplantÄ±sÄ±\",\n};\n\nconst LEAVE_TYPES = {\n  yillik: \"YÄ±llÄ±k Ä°zin\",\n  hastalik: \"HastalÄ±k Ä°zni\", \n  dogum: \"DoÄum Ä°zni\",\n  babalik: \"BabalÄ±k Ä°zni\",\n  evlilik: \"Evlilik Ä°zni\",\n  olum: \"ÃlÃ¼m Ä°zni\",\n  mazeret: \"Mazeret Ä°zni\",\n  ucretsiz: \"Ãcretsiz Ä°zin\",\n  hafta_tatili: \"Hafta Tatili\",\n  resmi_tatil: \"Resmi Tatil\"\n};\n\nconst leaveFormSchema = z.object({\n  personnelId: z.string().min(1, \"Personel seÃ§imi zorunludur\"),\n  type: z.enum([\"yillik\", \"hastalik\", \"dogum\", \"babalik\", \"evlilik\", \"olum\", \"mazeret\", \"ucretsiz\", \"hafta_tatili\", \"resmi_tatil\"]),\n  startDate: z.string().min(1, \"BaÅlangÄ±Ã§ tarihi zorunludur\"),\n  endDate: z.string().min(1, \"BitiÅ tarihi zorunludur\"),\n  reason: z.string().optional(),\n});\n\ntype LeaveForm = z.infer<typeof leaveFormSchema>;\n\nconst LEAVE_STATUS = {\n  pending: \"Bekliyor\",\n  approved: \"OnaylandÄ±\",\n  rejected: \"Reddedildi\"\n};\n\nconst LEAVE_STATUS_COLORS = {\n  pending: \"bg-yellow-500\",\n  approved: \"bg-green-500\", \n  rejected: \"bg-red-500\"\n};\n\ninterface CalendarPickerProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  selectedDate: string;\n  onDateSelect: (date: string) => void;\n  title: string;\n}\n\nfunction CalendarPicker({ open, onOpenChange, selectedDate, onDateSelect, title }: CalendarPickerProps) {\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n\n  const generateCalendarDays = () => {\n    const year = currentMonth.getFullYear();\n    const month = currentMonth.getMonth();\n    \n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const startCalendar = new Date(firstDay);\n    startCalendar.setDate(startCalendar.getDate() - firstDay.getDay());\n    \n    const days = [];\n    const currentDate = new Date(startCalendar);\n    \n    for (let i = 0; i < 42; i++) {\n      days.push(new Date(currentDate));\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    \n    return days;\n  };\n\n  const days = generateCalendarDays();\n  const today = new Date().toDateString();\n\n  const getDayClass = (day: Date) => {\n    const dateStr = `${day.getFullYear()}-${String(day.getMonth() + 1).padStart(2, '0')}-${String(day.getDate()).padStart(2, '0')}`;\n    const isCurrentMonth = day.getMonth() === currentMonth.getMonth();\n    const isToday = day.toDateString() === today;\n    const isSelected = dateStr === selectedDate;\n    const isHoliday = HOLIDAYS[dateStr as keyof typeof HOLIDAYS];\n    const isReligiousDay = RELIGIOUS_DAYS[dateStr as keyof typeof RELIGIOUS_DAYS];\n    const isSpecialDay = SPECIAL_DAYS[dateStr as keyof typeof SPECIAL_DAYS];\n    \n    let classes = \"p-2 rounded-lg cursor-pointer transition-colors text-center \";\n    \n    if (!isCurrentMonth) {\n      classes += \"text-muted-foreground \";\n    }\n    \n    if (isSelected) {\n      classes += \"bg-primary text-primary-foreground font-bold \";\n    } else if (isToday) {\n      classes += \"bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 font-bold \";\n    } else if (isHoliday) {\n      classes += \"bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 \";\n    } else if (isReligiousDay) {\n      classes += \"bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 \";\n    } else if (isSpecialDay) {\n      classes += \"bg-yellow-100 dark:bg-yellow-900/30 text-yellow-800 dark:text-yellow-200 \";\n    } else {\n      classes += \"hover:bg-muted \";\n    }\n    \n    return classes;\n  };\n\n  const nextMonth = () => {\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1));\n  };\n\n  const prevMonth = () => {\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md\" data-testid=\"modal-calendar-picker\">\n        <DialogHeader>\n          <DialogTitle>{title}</DialogTitle>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          {/* Header with month navigation */}\n          <div className=\"flex items-center justify-between\">\n            <Button variant=\"outline\" size=\"sm\" onClick={prevMonth}>\n              â\n            </Button>\n            <h3 className=\"text-lg font-semibold\">\n              {currentMonth.toLocaleDateString('tr-TR', { month: 'long', year: 'numeric' })}\n            </h3>\n            <Button variant=\"outline\" size=\"sm\" onClick={nextMonth}>\n              â\n            </Button>\n          </div>\n\n          {/* Days of week */}\n          <div className=\"grid grid-cols-7 gap-1\">\n            {['P', 'P', 'S', 'Ã', 'P', 'C', 'C'].map((day, index) => (\n              <div key={index} className=\"p-2 text-center font-medium text-muted-foreground text-sm\">\n                {day}\n              </div>\n            ))}\n          </div>\n          \n          {/* Calendar days */}\n          <div className=\"grid grid-cols-7 gap-1\">\n            {days.map((day, index) => {\n              const dayDateStr = `${day.getFullYear()}-${String(day.getMonth() + 1).padStart(2, '0')}-${String(day.getDate()).padStart(2, '0')}`;\n              const holiday = HOLIDAYS[dayDateStr as keyof typeof HOLIDAYS];\n              const religiousDay = RELIGIOUS_DAYS[dayDateStr as keyof typeof RELIGIOUS_DAYS];\n              const specialDay = SPECIAL_DAYS[dayDateStr as keyof typeof SPECIAL_DAYS];\n              \n              return (\n                <div\n                  key={index}\n                  className={getDayClass(day)}\n                  onClick={() => {\n                    onDateSelect(dayDateStr);\n                    onOpenChange(false);\n                  }}\n                >\n                  <div className=\"text-sm font-medium\">{day.getDate()}</div>\n                  {(holiday || religiousDay || specialDay) && (\n                    <div className=\"text-xs mt-1 space-x-1\">\n                      {holiday && <span className=\"text-red-600\">T</span>}\n                      {religiousDay && <span className=\"text-green-600\">D</span>}\n                      {specialDay && <span className=\"text-yellow-600\">Ã</span>}\n                    </div>\n                  )}\n                </div>\n              );\n            })}\n          </div>\n\n          {/* Legend */}\n          <div className=\"text-xs text-muted-foreground space-y-1\">\n            <div>T: Resmi Tatil, D: Dini GÃ¼n, Ã: Ãzel GÃ¼n</div>\n            <div>Ãift tÄ±klayarak tarih seÃ§in</div>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function LeaveManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [selectedRequest, setSelectedRequest] = useState<LeaveRequest | null>(null);\n  const [showStartDatePicker, setShowStartDatePicker] = useState(false);\n  const [showEndDatePicker, setShowEndDatePicker] = useState(false);\n  const [specialDayWarnings, setSpecialDayWarnings] = useState<string[]>([]);\n  const { toast } = useToast();\n\n  const form = useForm<LeaveForm>({\n    resolver: zodResolver(leaveFormSchema),\n    defaultValues: {\n      personnelId: \"\",\n      type: \"yillik\",\n      startDate: \"\",\n      endDate: \"\",\n      reason: \"\",\n    },\n  });\n\n  // Ä°zin tarih aralÄ±ÄÄ±nda Ã¶zel gÃ¼nleri kontrol et\n  const checkSpecialDaysInRange = (startDate: string, endDate: string) => {\n    if (!startDate || !endDate) return [];\n    \n    const warnings: string[] = [];\n    const start = new Date(startDate);\n    const end = new Date(endDate);\n    \n    // Tarih aralÄ±ÄÄ±ndaki her gÃ¼nÃ¼ kontrol et\n    const currentDate = new Date(start);\n    while (currentDate <= end) {\n      const dateStr = `${currentDate.getFullYear()}-${String(currentDate.getMonth() + 1).padStart(2, '0')}-${String(currentDate.getDate()).padStart(2, '0')}`;\n      \n      if (HOLIDAYS[dateStr as keyof typeof HOLIDAYS]) {\n        warnings.push(`${dateStr}: ${HOLIDAYS[dateStr as keyof typeof HOLIDAYS]} (Resmi Tatil)`);\n      }\n      if (RELIGIOUS_DAYS[dateStr as keyof typeof RELIGIOUS_DAYS]) {\n        warnings.push(`${dateStr}: ${RELIGIOUS_DAYS[dateStr as keyof typeof RELIGIOUS_DAYS]} (Dini GÃ¼n)`);\n      }\n      if (SPECIAL_DAYS[dateStr as keyof typeof SPECIAL_DAYS]) {\n        warnings.push(`${dateStr}: ${SPECIAL_DAYS[dateStr as keyof typeof SPECIAL_DAYS]} (Ãzel GÃ¼n)`);\n      }\n      \n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    \n    return warnings;\n  };\n\n  // Tarih deÄiÅikliklerini izle\n  useEffect(() => {\n    const startDate = form.watch(\"startDate\");\n    const endDate = form.watch(\"endDate\");\n    \n    if (startDate && endDate) {\n      const warnings = checkSpecialDaysInRange(startDate, endDate);\n      setSpecialDayWarnings(warnings);\n    } else {\n      setSpecialDayWarnings([]);\n    }\n  }, [form.watch(\"startDate\"), form.watch(\"endDate\")]);\n\n  const { data: leaveRequests = [], isLoading } = useQuery<LeaveRequest[]>({\n    queryKey: [\"/api/leave-requests\"],\n  });\n\n  const { data: personnel = [] } = useQuery<Personnel[]>({\n    queryKey: [\"/api/personnel\"],\n  });\n\n  // Get leave balances for selected personnel\n  const selectedPersonnelId = form.watch(\"personnelId\");\n  const currentYear = new Date().getFullYear();\n  \n  const { data: leaveBalances = [] } = useQuery<PersonnelLeaveBalance[]>({\n    queryKey: [\"/api/personnel\", selectedPersonnelId, \"leave-balances\", { year: currentYear }],\n    enabled: !!selectedPersonnelId,\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ id, status }: { id: string; status: string }) => {\n      const res = await apiRequest(\"PUT\", `/api/leave-requests/${id}`, { status });\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-requests\"] });\n      toast({\n        title: \"BaÅarÄ±lÄ±\",\n        description: \"Ä°zin talebi durumu gÃ¼ncellendi\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createLeaveRequestMutation = useMutation({\n    mutationFn: async (data: InsertLeaveRequest) => {\n      const res = await apiRequest(\"POST\", \"/api/leave-requests\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leave-requests\"] });\n      setShowAddModal(false);\n      form.reset();\n      toast({\n        title: \"BaÅarÄ±lÄ±\",\n        description: \"Ä°zin talebi baÅarÄ±yla oluÅturuldu\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: LeaveForm) => {\n    const leaveData = {\n      ...data,\n      startDate: new Date(data.startDate),\n      endDate: new Date(data.endDate),\n    };\n    createLeaveRequestMutation.mutate(leaveData);\n  };\n\n  // Calculate leave days based on Turkish labor law\n  const calculateLeaveEntitlement = (person: Personnel) => {\n    if (!person.startDate) return { yillik: 0 };\n    \n    const startDate = new Date(person.startDate);\n    const today = new Date();\n    const yearsWorked = (today.getTime() - startDate.getTime()) / (365.25 * 24 * 60 * 60 * 1000);\n    \n    let yillikIzin = 0;\n    if (yearsWorked >= 1 && yearsWorked < 5) {\n      yillikIzin = 14; // 1-5 years: 14 days\n    } else if (yearsWorked >= 5 && yearsWorked < 15) {\n      yillikIzin = 20; // 5-15 years: 20 days\n    } else if (yearsWorked >= 15) {\n      yillikIzin = 26; // 15+ years: 26 days\n    }\n    \n    return {\n      yillik: yillikIzin,\n      babalik: 5, // Fixed 5 days\n      evlilik: 3, // Fixed 3 days\n      olum: 3, // Fixed 3 days\n      // Other leave types are unlimited or case-by-case\n    };\n  };\n\n  // Get selected personnel's leave balance for the selected leave type\n  const getSelectedLeaveBalance = () => {\n    const selectedType = form.watch(\"type\");\n    const balance = leaveBalances.find(b => b.leaveType === selectedType);\n    return balance || null;\n  };\n\n  const filteredRequests = leaveRequests.filter((request) => {\n    const person = personnel.find(p => p.id === request.personnelId);\n    const fullName = person ? `${person.firstName} ${person.lastName}` : \"\";\n    return fullName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n           LEAVE_TYPES[request.type as keyof typeof LEAVE_TYPES]?.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  const stats = {\n    total: leaveRequests.length,\n    pending: leaveRequests.filter(r => r.status === \"pending\").length,\n    approved: leaveRequests.filter(r => r.status === \"approved\").length,\n    rejected: leaveRequests.filter(r => r.status === \"rejected\").length,\n  };\n\n  if (isLoading) {\n    return (\n      <MainLayout>\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-2 text-muted-foreground\">Ä°zin talepleri yÃ¼kleniyor...</p>\n          </div>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  return (\n    <MainLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Ä°zin YÃ¶netimi</h1>\n            <p className=\"text-muted-foreground\">Personel izin taleplerini yÃ¶netin</p>\n          </div>\n          <Button onClick={() => setShowAddModal(true)} data-testid=\"button-add-leave\">\n            <Plus className=\"mr-2 h-4 w-4\" />\n            Yeni Ä°zin Talebi\n          </Button>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Toplam Talep</CardTitle>\n              <FileText className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-requests\">{stats.total}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Bekleyen</CardTitle>\n              <Clock className=\"h-4 w-4 text-yellow-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-yellow-600\" data-testid=\"text-pending-requests\">{stats.pending}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Onaylanan</CardTitle>\n              <Calendar className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-approved-requests\">{stats.approved}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Reddedilen</CardTitle>\n              <User className=\"h-4 w-4 text-red-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-red-600\" data-testid=\"text-rejected-requests\">{stats.rejected}</div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search */}\n        <div className=\"flex items-center space-x-2\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-muted-foreground\" />\n            <Input\n              placeholder=\"Personel adÄ± veya izin tÃ¼rÃ¼ne gÃ¶re ara...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-8\"\n              data-testid=\"input-search-leave\"\n            />\n          </div>\n        </div>\n\n        {/* Leave Requests Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Ä°zin Talepleri</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {filteredRequests.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Calendar className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                  <h3 className=\"mt-4 text-lg font-semibold\">Ä°zin talebi bulunamadÄ±</h3>\n                  <p className=\"text-muted-foreground\">\n                    {searchTerm ? \"Arama kriterlerinize uygun\" : \"HenÃ¼z hiÃ§\"} izin talebi bulunmuyor.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"grid gap-4\">\n                  {filteredRequests.map((request) => {\n                    const person = personnel.find(p => p.id === request.personnelId);\n                    const fullName = person ? `${person.firstName} ${person.lastName}` : \"Bilinmeyen\";\n                    \n                    return (\n                      <div \n                        key={request.id} \n                        className=\"border rounded-lg p-4 space-y-4 cursor-pointer hover:shadow-md transition-shadow\"\n                        onClick={() => setSelectedRequest(request)}\n                        data-testid={`card-leave-request-${request.id}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center space-x-4\">\n                            <div>\n                              <h3 className=\"font-semibold\">{fullName}</h3>\n                              <p className=\"text-sm text-muted-foreground\">\n                                {person?.employeeNumber || \"N/A\"} â¢ {person?.position || \"N/A\"}\n                              </p>\n                            </div>\n                            <Badge variant=\"outline\">\n                              {LEAVE_TYPES[request.type as keyof typeof LEAVE_TYPES] || request.type}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center space-x-2\">\n                            <Badge \n                              className={`text-white ${LEAVE_STATUS_COLORS[request.status as keyof typeof LEAVE_STATUS_COLORS]}`}\n                            >\n                              {LEAVE_STATUS[request.status as keyof typeof LEAVE_STATUS] || request.status}\n                            </Badge>\n                          </div>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 text-sm\">\n                          <div>\n                            <span className=\"font-medium\">BaÅlangÄ±Ã§ Tarihi:</span>\n                            <p className=\"text-muted-foreground\">\n                              {new Date(request.startDate).toLocaleDateString('tr-TR')}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">BitiÅ Tarihi:</span>\n                            <p className=\"text-muted-foreground\">\n                              {new Date(request.endDate).toLocaleDateString('tr-TR')}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"font-medium\">GÃ¼n SayÄ±sÄ±:</span>\n                            <p className=\"text-muted-foreground\">\n                              {Math.ceil((new Date(request.endDate).getTime() - new Date(request.startDate).getTime()) / (1000 * 60 * 60 * 24)) + 1} gÃ¼n\n                            </p>\n                          </div>\n                        </div>\n\n                        {request.reason && (\n                          <div>\n                            <span className=\"font-medium text-sm\">AÃ§Ä±klama:</span>\n                            <p className=\"text-sm text-muted-foreground mt-1\">{request.reason}</p>\n                          </div>\n                        )}\n\n                        {request.status === \"pending\" && (\n                          <div className=\"flex space-x-2 pt-2\">\n                            <Button\n                              size=\"sm\"\n                              onClick={() => updateStatusMutation.mutate({ id: request.id, status: \"approved\" })}\n                              disabled={updateStatusMutation.isPending}\n                              data-testid={`button-approve-${request.id}`}\n                            >\n                              Onayla\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"destructive\"\n                              onClick={() => updateStatusMutation.mutate({ id: request.id, status: \"rejected\" })}\n                              disabled={updateStatusMutation.isPending}\n                              data-testid={`button-reject-${request.id}`}\n                            >\n                              Reddet\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Add Leave Request Modal */}\n      <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"modal-add-leave-request\">\n          <DialogHeader>\n            <DialogTitle>Yeni Ä°zin Talebi OluÅtur</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n              <FormField\n                control={form.control}\n                name=\"personnelId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Personel *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-leave-personnel\">\n                          <SelectValue placeholder=\"Personel seÃ§in\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {personnel.map((person) => (\n                          <SelectItem key={person.id} value={person.id}>\n                            {person.firstName} {person.lastName} - {person.position}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Ä°zin TÃ¼rÃ¼ *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-leave-type\">\n                          <SelectValue placeholder=\"Ä°zin tÃ¼rÃ¼ seÃ§in\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {Object.entries(LEAVE_TYPES).map(([key, value]) => (\n                          <SelectItem key={key} value={key}>\n                            {value}\n                          </SelectItem>\n                        ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"startDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>BaÅlangÄ±Ã§ Tarihi *</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            value={field.value ? new Date(field.value).toLocaleDateString('tr-TR') : \"\"}\n                            placeholder=\"Tarih seÃ§in\"\n                            readOnly\n                            onClick={() => setShowStartDatePicker(true)}\n                            className=\"cursor-pointer\"\n                            data-testid=\"input-leave-start-date\"\n                          />\n                          <Calendar \n                            className=\"absolute right-3 top-3 h-4 w-4 text-muted-foreground pointer-events-none\" \n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"endDate\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>BitiÅ Tarihi *</FormLabel>\n                      <FormControl>\n                        <div className=\"relative\">\n                          <Input\n                            value={field.value ? new Date(field.value).toLocaleDateString('tr-TR') : \"\"}\n                            placeholder=\"Tarih seÃ§in\"\n                            readOnly\n                            onClick={() => setShowEndDatePicker(true)}\n                            className=\"cursor-pointer\"\n                            data-testid=\"input-leave-end-date\"\n                          />\n                          <Calendar \n                            className=\"absolute right-3 top-3 h-4 w-4 text-muted-foreground pointer-events-none\" \n                          />\n                        </div>\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              {/* Ãzel GÃ¼n UyarÄ±larÄ± */}\n              {specialDayWarnings.length > 0 && (\n                <Alert className=\"border-orange-200 bg-orange-50 dark:bg-orange-900/20\">\n                  <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                  <AlertDescription className=\"text-orange-800 dark:text-orange-200\">\n                    <div className=\"font-semibold mb-2\">\n                      DÄ°KKAT! Ä°zin tarih aralÄ±ÄÄ±nda Ã¶zel gÃ¼nler ve etkinlikler var:\n                    </div>\n                    <ul className=\"space-y-1 text-sm\">\n                      {specialDayWarnings.map((warning, index) => (\n                        <li key={index}>â¢ {warning}</li>\n                      ))}\n                    </ul>\n                    <div className=\"mt-3 text-sm font-medium\">\n                      Ä°zin vermek istediÄinize emin misiniz? YukarÄ±daki Ã¶zel gÃ¼nleri dikkate alÄ±n.\n                    </div>\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <FormField\n                control={form.control}\n                name=\"reason\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>AÃ§Ä±klama</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Ä°zin talebi aÃ§Ä±klamasÄ± (isteÄe baÄlÄ±)\"\n                        {...field}\n                        data-testid=\"textarea-leave-reason\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex space-x-3\">\n                <Button\n                  type=\"submit\"\n                  disabled={createLeaveRequestMutation.isPending}\n                  data-testid=\"button-submit-leave-request\"\n                >\n                  {createLeaveRequestMutation.isPending ? \"Kaydediliyor...\" : \"Ä°zin Talebi OluÅtur\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowAddModal(false);\n                    form.reset();\n                  }}\n                  data-testid=\"button-cancel-leave-request\"\n                >\n                  Ä°ptal\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Leave Request Detail Modal */}\n      <Dialog open={!!selectedRequest} onOpenChange={(open) => !open && setSelectedRequest(null)}>\n        <DialogContent className=\"max-w-2xl\" data-testid=\"modal-leave-request-detail\">\n          <DialogHeader>\n            <DialogTitle>Ä°zin Talebi DetaylarÄ±</DialogTitle>\n          </DialogHeader>\n          {selectedRequest && (\n            <div className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Personel</Label>\n                  <p className=\"mt-1 text-foreground\">\n                    {(() => {\n                      const person = personnel.find(p => p.id === selectedRequest.personnelId);\n                      return person ? `${person.firstName} ${person.lastName}` : \"Bilinmeyen\";\n                    })()}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Ä°zin TÃ¼rÃ¼</Label>\n                  <p className=\"mt-1 text-foreground\">\n                    {LEAVE_TYPES[selectedRequest.type as keyof typeof LEAVE_TYPES]}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">BaÅlangÄ±Ã§ Tarihi</Label>\n                  <p className=\"mt-1 text-foreground\">\n                    {new Date(selectedRequest.startDate).toLocaleDateString('tr-TR')}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">BitiÅ Tarihi</Label>\n                  <p className=\"mt-1 text-foreground\">\n                    {new Date(selectedRequest.endDate).toLocaleDateString('tr-TR')}\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">GÃ¼n SayÄ±sÄ±</Label>\n                  <p className=\"mt-1 text-foreground\">\n                    {Math.ceil((new Date(selectedRequest.endDate).getTime() - new Date(selectedRequest.startDate).getTime()) / (1000 * 60 * 60 * 24)) + 1} gÃ¼n\n                  </p>\n                </div>\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">Durum</Label>\n                  <Badge \n                    className={`mt-1 text-white ${LEAVE_STATUS_COLORS[selectedRequest.status as keyof typeof LEAVE_STATUS_COLORS]}`}\n                  >\n                    {LEAVE_STATUS[selectedRequest.status as keyof typeof LEAVE_STATUS]}\n                  </Badge>\n                </div>\n              </div>\n              \n              {selectedRequest.reason && (\n                <div>\n                  <Label className=\"text-sm font-medium text-muted-foreground\">AÃ§Ä±klama</Label>\n                  <p className=\"mt-1 text-foreground\">{selectedRequest.reason}</p>\n                </div>\n              )}\n\n              {selectedRequest.status === \"pending\" && (\n                <div className=\"flex space-x-3\">\n                  <Button\n                    onClick={() => {\n                      updateStatusMutation.mutate({ id: selectedRequest.id, status: \"approved\" });\n                      setSelectedRequest(null);\n                    }}\n                    disabled={updateStatusMutation.isPending}\n                    data-testid=\"button-approve-leave-detail\"\n                  >\n                    Onayla\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    onClick={() => {\n                      updateStatusMutation.mutate({ id: selectedRequest.id, status: \"rejected\" });\n                      setSelectedRequest(null);\n                    }}\n                    disabled={updateStatusMutation.isPending}\n                    data-testid=\"button-reject-leave-detail\"\n                  >\n                    Reddet\n                  </Button>\n                </div>\n              )}\n            </div>\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Calendar Pickers */}\n      <CalendarPicker\n        open={showStartDatePicker}\n        onOpenChange={setShowStartDatePicker}\n        selectedDate={form.watch(\"startDate\")}\n        onDateSelect={(date) => form.setValue(\"startDate\", date)}\n        title=\"BaÅlangÄ±Ã§ Tarihi SeÃ§in\"\n      />\n\n      <CalendarPicker\n        open={showEndDatePicker}\n        onOpenChange={setShowEndDatePicker}\n        selectedDate={form.watch(\"endDate\")}\n        onDateSelect={(date) => form.setValue(\"endDate\", date)}\n        title=\"BitiÅ Tarihi SeÃ§in\"\n      />\n    </MainLayout>\n  );\n}","size_bytes":36546},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/personnel-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { PersonnelModal } from \"@/components/modals/personnel-modal\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Personnel, InsertPersonnel, Branch } from \"@shared/schema\";\nimport { Plus, Search, Edit, Eye } from \"lucide-react\";\n\nexport default function PersonnelManagement() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedPersonnel, setSelectedPersonnel] = useState<Personnel | null>(null);\n  const [modalMode, setModalMode] = useState<'view' | 'edit' | 'add'>('view');\n  const [showModal, setShowModal] = useState(false);\n  const { toast } = useToast();\n\n  const { data: personnel = [], isLoading: personnelLoading } = useQuery<Personnel[]>({\n    queryKey: [\"/api/personnel\", searchQuery ? { search: searchQuery } : {}],\n  });\n\n  const { data: branches = [] } = useQuery<Branch[]>({\n    queryKey: [\"/api/branches\"],\n  });\n\n  const handleAddPersonnel = () => {\n    setSelectedPersonnel(null);\n    setModalMode('add');\n    setShowModal(true);\n  };\n\n  const handleViewPersonnel = (person: Personnel) => {\n    setSelectedPersonnel(person);\n    setModalMode('view');\n    setShowModal(true);\n  };\n\n  const handleEditPersonnel = (person: Personnel) => {\n    setSelectedPersonnel(person);\n    setModalMode('edit');\n    setShowModal(true);\n  };\n\n  const filteredPersonnel = personnel.filter(p =>\n    `${p.firstName} ${p.lastName}`.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    p.employeeNumber.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <MainLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold\">Personel YÃ¶netimi</h1>\n          <Button onClick={handleAddPersonnel} data-testid=\"button-add-personnel\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Yeni Personel\n          </Button>\n        </div>\n\n        {/* Search */}\n        <div className=\"flex items-center space-x-4\">\n          <div className=\"relative flex-1 max-w-sm\">\n            <Input\n              placeholder=\"Personel ara...\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-personnel\"\n            />\n            <Search className=\"absolute left-3 top-2.5 w-4 h-4 text-muted-foreground\" />\n          </div>\n        </div>\n\n        {/* Personnel Table */}\n        <Card>\n          <CardContent className=\"p-0\">\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>Personel NumarasÄ±</TableHead>\n                  <TableHead>Ad Soyad</TableHead>\n                  <TableHead>Pozisyon</TableHead>\n                  <TableHead>Departman</TableHead>\n                  <TableHead>Telefon</TableHead>\n                  <TableHead>Åube</TableHead>\n                  <TableHead>Durum</TableHead>\n                  <TableHead className=\"text-right\">Ä°Ålemler</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {personnelLoading ? (\n                  // Loading skeletons\n                  Array.from({ length: 5 }).map((_, i) => (\n                    <TableRow key={i}>\n                      <TableCell><div className=\"h-4 bg-muted rounded w-20 animate-pulse\" /></TableCell>\n                      <TableCell><div className=\"h-4 bg-muted rounded w-32 animate-pulse\" /></TableCell>\n                      <TableCell><div className=\"h-4 bg-muted rounded w-24 animate-pulse\" /></TableCell>\n                      <TableCell><div className=\"h-4 bg-muted rounded w-20 animate-pulse\" /></TableCell>\n                      <TableCell><div className=\"h-4 bg-muted rounded w-24 animate-pulse\" /></TableCell>\n                      <TableCell><div className=\"h-4 bg-muted rounded w-20 animate-pulse\" /></TableCell>\n                      <TableCell><div className=\"h-4 bg-muted rounded w-16 animate-pulse\" /></TableCell>\n                      <TableCell><div className=\"h-4 bg-muted rounded w-20 animate-pulse\" /></TableCell>\n                    </TableRow>\n                  ))\n                ) : filteredPersonnel.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={8} className=\"text-center py-12\">\n                      <p className=\"text-muted-foreground\">Personel bulunamadÄ±</p>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredPersonnel.map((person) => (\n                    <TableRow\n                      key={person.id}\n                      className=\"cursor-pointer hover:bg-muted/50\"\n                      onClick={() => handleViewPersonnel(person)}\n                      data-testid={`row-personnel-${person.id}`}\n                    >\n                      <TableCell className=\"font-medium\">{person.employeeNumber}</TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{person.firstName} {person.lastName}</div>\n                          <div className=\"text-sm text-muted-foreground\">{person.email}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>{person.position}</TableCell>\n                      <TableCell>{person.department || \"BelirtilmemiÅ\"}</TableCell>\n                      <TableCell>{person.phone}</TableCell>\n                      <TableCell>{branches.find(b => b.id === person.branchId)?.name || \"BelirtilmemiÅ\"}</TableCell>\n                      <TableCell>\n                        <Badge variant={person.isActive ? \"default\" : \"secondary\"}>\n                          {person.isActive ? \"Aktif\" : \"Pasif\"}\n                        </Badge>\n                      </TableCell>\n                      <TableCell className=\"text-right\">\n                        <div className=\"flex space-x-2 justify-end\">\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleViewPersonnel(person);\n                            }}\n                            data-testid={`button-view-${person.id}`}\n                          >\n                            <Eye className=\"w-4 h-4\" />\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              handleEditPersonnel(person);\n                            }}\n                            data-testid={`button-edit-${person.id}`}\n                          >\n                            <Edit className=\"w-4 h-4\" />\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Personnel Modal */}\n      <PersonnelModal\n        personnel={selectedPersonnel}\n        open={showModal}\n        onOpenChange={setShowModal}\n        mode={modalMode}\n      />\n    </MainLayout>\n  );\n}\n","size_bytes":7919},"client/src/pages/qr-control.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { QrCode, Scan, CheckCircle, XCircle, Clock, User } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport type { Personnel, Attendance } from \"@shared/schema\";\n\nexport default function QRControl() {\n  const [qrCode, setQrCode] = useState(\"\");\n  const [scanResult, setScanResult] = useState<string | null>(null);\n  const { toast } = useToast();\n\n  const { data: personnel = [] } = useQuery<Personnel[]>({\n    queryKey: [\"/api/personnel\"],\n  });\n\n  const { data: todayAttendance = [], refetch: refetchAttendance } = useQuery<Attendance[]>({\n    queryKey: [\"/api/attendance/today\"],\n  });\n\n  const scanQRMutation = useMutation({\n    mutationFn: async (qrData: string) => {\n      const res = await apiRequest(\"POST\", \"/api/qr-scan\", { qrCode: qrData });\n      return await res.json();\n    },\n    onSuccess: (data) => {\n      setScanResult(`QR Kod baÅarÄ±yla okundu: ${data.message}`);\n      queryClient.invalidateQueries({ queryKey: [\"/api/attendance\"] });\n      refetchAttendance();\n      toast({\n        title: \"BaÅarÄ±lÄ±\",\n        description: data.message,\n      });\n      setQrCode(\"\");\n    },\n    onError: (error: Error) => {\n      setScanResult(`Hata: ${error.message}`);\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleScan = () => {\n    if (!qrCode.trim()) {\n      toast({\n        title: \"Hata\",\n        description: \"LÃ¼tfen QR kodu girin\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    scanQRMutation.mutate(qrCode.trim());\n  };\n\n  const stats = {\n    totalPresent: todayAttendance.filter(a => a.checkInTime && !a.checkOutTime).length,\n    totalCheckedOut: todayAttendance.filter(a => a.checkInTime && a.checkOutTime).length,\n    totalPersonnel: personnel.filter(p => p.isActive).length,\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">QR Kod Kontrol</h1>\n            <p className=\"text-muted-foreground\">Personel giriÅ-Ã§Ä±kÄ±Å QR kodlarÄ±nÄ± okutun</p>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid gap-4 md:grid-cols-3\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Ä°Å Yerinde</CardTitle>\n              <User className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-green-600\" data-testid=\"text-present-count\">\n                {stats.totalPresent}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Aktif personel</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">ÃÄ±kÄ±Å Yapan</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-blue-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold text-blue-600\" data-testid=\"text-checked-out-count\">\n                {stats.totalCheckedOut}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">BugÃ¼n Ã§Ä±kÄ±Å yapan</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Toplam Personel</CardTitle>\n              <User className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"text-total-personnel\">\n                {stats.totalPersonnel}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Aktif personel sayÄ±sÄ±</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* QR Scanner */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <QrCode className=\"mr-2 h-5 w-5\" />\n              QR Kod Okuyucu\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex space-x-2\">\n              <Input\n                placeholder=\"QR kodu buraya girin veya okutun...\"\n                value={qrCode}\n                onChange={(e) => setQrCode(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleScan()}\n                data-testid=\"input-qr-code\"\n              />\n              <Button \n                onClick={handleScan}\n                disabled={scanQRMutation.isPending}\n                data-testid=\"button-scan-qr\"\n              >\n                <Scan className=\"mr-2 h-4 w-4\" />\n                {scanQRMutation.isPending ? \"Okutluyor...\" : \"Okut\"}\n              </Button>\n            </div>\n\n            {scanResult && (\n              <Alert className={scanResult.startsWith(\"Hata\") ? \"border-red-200 bg-red-50\" : \"border-green-200 bg-green-50\"}>\n                <AlertDescription data-testid=\"text-scan-result\">\n                  {scanResult}\n                </AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"text-sm text-muted-foreground\">\n              <p>â¢ Personel QR kodunu okutarak giriÅ-Ã§Ä±kÄ±Å kaydÄ± oluÅturabilirsiniz</p>\n              <p>â¢ QR kod formatÄ±: PERSONEL_ID format</p>\n              <p>â¢ Sistem otomatik olarak giriÅ/Ã§Ä±kÄ±Å durumunu tespit eder</p>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Today's Attendance */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center\">\n              <Clock className=\"mr-2 h-5 w-5\" />\n              BugÃ¼nkÃ¼ Devam Durumu\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {todayAttendance.length === 0 ? (\n                <div className=\"text-center py-8\">\n                  <Clock className=\"mx-auto h-12 w-12 text-muted-foreground\" />\n                  <h3 className=\"mt-4 text-lg font-semibold\">BugÃ¼n henÃ¼z devam kaydÄ± yok</h3>\n                  <p className=\"text-muted-foreground\">\n                    Ä°lk QR kod okutmalarÄ±nÄ± bekliyoruz.\n                  </p>\n                </div>\n              ) : (\n                <div className=\"grid gap-4\">\n                  {todayAttendance.map((attendance) => {\n                    const person = personnel.find(p => p.id === attendance.personnelId);\n                    const fullName = person ? `${person.firstName} ${person.lastName}` : \"Bilinmeyen\";\n                    const isPresent = attendance.checkInTime && !attendance.checkOutTime;\n                    \n                    return (\n                      <div \n                        key={attendance.id} \n                        className=\"border rounded-lg p-4 flex items-center justify-between\"\n                        data-testid={`card-attendance-${attendance.id}`}\n                      >\n                        <div className=\"flex items-center space-x-4\">\n                          <div>\n                            <h3 className=\"font-semibold\">{fullName}</h3>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {person?.employeeNumber || \"N/A\"} â¢ {person?.position || \"N/A\"}\n                            </p>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-4\">\n                          <div className=\"text-right text-sm\">\n                            {attendance.checkInTime && (\n                              <p>\n                                <span className=\"font-medium\">GiriÅ:</span> {' '}\n                                {new Date(attendance.checkInTime).toLocaleTimeString('tr-TR', {\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                })}\n                              </p>\n                            )}\n                            {attendance.checkOutTime && (\n                              <p>\n                                <span className=\"font-medium\">ÃÄ±kÄ±Å:</span> {' '}\n                                {new Date(attendance.checkOutTime).toLocaleTimeString('tr-TR', {\n                                  hour: '2-digit',\n                                  minute: '2-digit'\n                                })}\n                              </p>\n                            )}\n                          </div>\n                          \n                          <Badge \n                            variant={isPresent ? \"default\" : \"secondary\"}\n                            className={isPresent ? \"bg-green-500 hover:bg-green-600\" : \"\"}\n                          >\n                            {isPresent ? (\n                              <>\n                                <CheckCircle className=\"mr-1 h-3 w-3\" />\n                                Ä°Å Yerinde\n                              </>\n                            ) : (\n                              <>\n                                <XCircle className=\"mr-1 h-3 w-3\" />\n                                ÃÄ±kÄ±Å Yapan\n                              </>\n                            )}\n                          </Badge>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":10343},"client/src/pages/reports.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { BarChart3, Calendar, Download, TrendingUp, Users, Clock, FileText } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport type { Personnel, Attendance, LeaveRequest, Branch } from \"@shared/schema\";\n\nexport default function Reports() {\n  const [dateRange, setDateRange] = useState(\"this-month\");\n  const [selectedBranch, setSelectedBranch] = useState(\"all\");\n\n  const { data: personnel = [] } = useQuery<Personnel[]>({\n    queryKey: [\"/api/personnel\"],\n  });\n\n  const { data: attendance = [] } = useQuery<Attendance[]>({\n    queryKey: [\"/api/attendance\", { range: dateRange, branch: selectedBranch }],\n  });\n\n  const { data: leaveRequests = [] } = useQuery<LeaveRequest[]>({\n    queryKey: [\"/api/leave-requests\", { range: dateRange, branch: selectedBranch }],\n  });\n\n  const { data: branches = [] } = useQuery<Branch[]>({\n    queryKey: [\"/api/branches\"],\n  });\n\n  // Attendance Statistics\n  const attendanceStats = {\n    totalDays: attendance.length,\n    totalHours: attendance.reduce((sum, record) => {\n      if (record.checkInTime && record.checkOutTime) {\n        const start = new Date(record.checkInTime);\n        const end = new Date(record.checkOutTime);\n        const hours = (end.getTime() - start.getTime()) / (1000 * 60 * 60);\n        return sum + hours;\n      }\n      return sum;\n    }, 0),\n    averageHours: 0,\n    lateArrivals: attendance.filter(record => {\n      if (!record.checkInTime) return false;\n      const checkIn = new Date(record.checkInTime);\n      return checkIn.getHours() > 9 || (checkIn.getHours() === 9 && checkIn.getMinutes() > 0);\n    }).length,\n  };\n\n  attendanceStats.averageHours = attendanceStats.totalDays > 0 ? \n    attendanceStats.totalHours / attendanceStats.totalDays : 0;\n\n  // Leave Statistics\n  const leaveStats = {\n    total: leaveRequests.length,\n    pending: leaveRequests.filter(req => req.status === \"pending\").length,\n    approved: leaveRequests.filter(req => req.status === \"approved\").length,\n    rejected: leaveRequests.filter(req => req.status === \"rejected\").length,\n    totalDays: leaveRequests\n      .filter(req => req.status === \"approved\")\n      .reduce((sum, req) => sum + req.days, 0),\n  };\n\n  // Personnel Statistics\n  const personnelStats = {\n    total: personnel.length,\n    active: personnel.filter(p => p.isActive).length,\n    inactive: personnel.filter(p => !p.isActive).length,\n    byBranch: branches.map(branch => ({\n      name: branch.name,\n      count: personnel.filter(p => p.branchId === branch.id && p.isActive).length,\n    })),\n  };\n\n  const exportReport = (reportType: string) => {\n    // Bu fonksiyon gelecekte PDF/Excel export iÃ§in kullanÄ±lacak\n    console.log(`Exporting ${reportType} report...`);\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Raporlar</h1>\n            <p className=\"text-muted-foreground\">Personel ve devam istatistikleri</p>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Select value={dateRange} onValueChange={setDateRange}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-date-range\">\n                <SelectValue placeholder=\"Tarih aralÄ±ÄÄ±\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"this-week\">Bu Hafta</SelectItem>\n                <SelectItem value=\"last-week\">GeÃ§en Hafta</SelectItem>\n                <SelectItem value=\"this-month\">Bu Ay</SelectItem>\n                <SelectItem value=\"last-month\">GeÃ§en Ay</SelectItem>\n                <SelectItem value=\"this-quarter\">Bu Ãeyrek</SelectItem>\n                <SelectItem value=\"this-year\">Bu YÄ±l</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={selectedBranch} onValueChange={setSelectedBranch}>\n              <SelectTrigger className=\"w-[180px]\" data-testid=\"select-branch\">\n                <SelectValue placeholder=\"Åube seÃ§in\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">TÃ¼m Åubeler</SelectItem>\n                {branches.map((branch) => (\n                  <SelectItem key={branch.id} value={branch.id}>\n                    {branch.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-4\">\n          <TabsList>\n            <TabsTrigger value=\"overview\">Genel BakÄ±Å</TabsTrigger>\n            <TabsTrigger value=\"attendance\">Devam Raporu</TabsTrigger>\n            <TabsTrigger value=\"leave\">Ä°zin Raporu</TabsTrigger>\n            <TabsTrigger value=\"personnel\">Personel Raporu</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-4\">\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Toplam Personel</CardTitle>\n                  <Users className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-total-personnel\">\n                    {personnelStats.active}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {personnelStats.inactive} pasif personel\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Toplam Devam</CardTitle>\n                  <Clock className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-total-attendance\">\n                    {attendanceStats.totalDays}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {attendanceStats.lateArrivals} geÃ§ gelme\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Ä°zin Talepleri</CardTitle>\n                  <FileText className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-leave-requests\">\n                    {leaveStats.total}\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    {leaveStats.pending} bekleyen\n                  </p>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <CardTitle className=\"text-sm font-medium\">Ort. ÃalÄ±Åma</CardTitle>\n                  <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-2xl font-bold\" data-testid=\"text-avg-hours\">\n                    {attendanceStats.averageHours.toFixed(1)}s\n                  </div>\n                  <p className=\"text-xs text-muted-foreground\">\n                    gÃ¼nlÃ¼k ortalama\n                  </p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Branch Distribution */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Åubelere GÃ¶re Personel DaÄÄ±lÄ±mÄ±</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {personnelStats.byBranch.map((branch, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"font-medium\">{branch.name}</div>\n                      <div className=\"flex items-center space-x-2\">\n                        <div className=\"text-sm text-muted-foreground\">\n                          {branch.count} personel\n                        </div>\n                        <div className=\"w-24 bg-secondary rounded-full h-2\">\n                          <div \n                            className=\"bg-primary h-2 rounded-full\" \n                            style={{ \n                              width: `${(branch.count / personnelStats.active) * 100}%` \n                            }}\n                          ></div>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"attendance\" className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold\">Devam Raporu</h2>\n              <Button \n                onClick={() => exportReport(\"attendance\")}\n                data-testid=\"button-export-attendance\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Ä°ndir\n              </Button>\n            </div>\n\n            <div className=\"grid gap-4 md:grid-cols-3\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Toplam ÃalÄ±Åma Saati</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-blue-600\">\n                    {attendanceStats.totalHours.toFixed(1)}s\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">GeÃ§ Gelme SayÄ±sÄ±</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-red-600\">\n                    {attendanceStats.lateArrivals}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">GÃ¼nlÃ¼k Ortalama</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-green-600\">\n                    {attendanceStats.averageHours.toFixed(1)}s\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"leave\" className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold\">Ä°zin Raporu</h2>\n              <Button \n                onClick={() => exportReport(\"leave\")}\n                data-testid=\"button-export-leave\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Ä°ndir\n              </Button>\n            </div>\n\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Toplam Talep</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold\">{leaveStats.total}</div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Bekleyen</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-yellow-600\">\n                    {leaveStats.pending}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Onaylanan</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-green-600\">\n                    {leaveStats.approved}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Toplam Ä°zin GÃ¼nÃ¼</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"text-3xl font-bold text-blue-600\">\n                    {leaveStats.totalDays}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"personnel\" className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h2 className=\"text-xl font-semibold\">Personel Raporu</h2>\n              <Button \n                onClick={() => exportReport(\"personnel\")}\n                data-testid=\"button-export-personnel\"\n              >\n                <Download className=\"mr-2 h-4 w-4\" />\n                Ä°ndir\n              </Button>\n            </div>\n\n            <div className=\"grid gap-4 md:grid-cols-2\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Personel Durumu</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <div className=\"flex justify-between\">\n                    <span>Aktif Personel:</span>\n                    <span className=\"font-bold text-green-600\">{personnelStats.active}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Pasif Personel:</span>\n                    <span className=\"font-bold text-red-600\">{personnelStats.inactive}</span>\n                  </div>\n                  <div className=\"flex justify-between\">\n                    <span>Toplam:</span>\n                    <span className=\"font-bold\">{personnelStats.total}</span>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Åube DaÄÄ±lÄ±mÄ±</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  {personnelStats.byBranch.map((branch, index) => (\n                    <div key={index} className=\"flex justify-between\">\n                      <span>{branch.name}:</span>\n                      <span className=\"font-bold\">{branch.count}</span>\n                    </div>\n                  ))}\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":15407},"client/src/pages/shift-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { DetailModal } from \"@/components/modals/detail-modal\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Shift, InsertShift, insertShiftSchema, Branch } from \"@shared/schema\";\nimport { Plus, Clock, Sunrise, Sun, Sunset, Moon, Edit, Eye } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst shiftFormSchema = insertShiftSchema.extend({\n  name: z.string().min(2, \"Vardiya adÄ± en az 2 karakter olmalÄ±dÄ±r\"),\n  startTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, \"GeÃ§erli saat formatÄ±: HH:MM\"),\n  endTime: z.string().regex(/^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/, \"GeÃ§erli saat formatÄ±: HH:MM\"),\n});\n\ntype ShiftForm = z.infer<typeof shiftFormSchema>;\n\nconst shiftTypeIcons = {\n  sabah: Sunrise,\n  oglen: Sun,\n  aksam: Sunset,\n  gece: Moon,\n};\n\nconst shiftTypeLabels = {\n  sabah: \"Sabah\",\n  oglen: \"ÃÄlen\",\n  aksam: \"AkÅam\",\n  gece: \"Gece\",\n};\n\nconst shiftTypeColors = {\n  sabah: \"text-orange-500\",\n  oglen: \"text-yellow-500\",\n  aksam: \"text-purple-500\",\n  gece: \"text-blue-500\",\n};\n\nexport default function ShiftManagement() {\n  const [selectedShift, setSelectedShift] = useState<Shift | null>(null);\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [showEditModal, setShowEditModal] = useState(false);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: shifts = [], isLoading: shiftsLoading } = useQuery<Shift[]>({\n    queryKey: [\"/api/shifts\"],\n  });\n\n  const { data: branches = [] } = useQuery<Branch[]>({\n    queryKey: [\"/api/branches\"],\n  });\n\n  const form = useForm<ShiftForm>({\n    resolver: zodResolver(shiftFormSchema),\n    defaultValues: {\n      name: \"\",\n      type: \"sabah\",\n      startTime: \"\",\n      endTime: \"\",\n      branchId: \"\",\n      isActive: true,\n    },\n  });\n\n  const createShiftMutation = useMutation({\n    mutationFn: async (data: InsertShift) => {\n      const res = await apiRequest(\"POST\", \"/api/shifts\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shifts\"] });\n      setShowAddModal(false);\n      form.reset();\n      toast({\n        title: \"BaÅarÄ±lÄ±\",\n        description: \"Vardiya baÅarÄ±yla eklendi\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateShiftMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Shift> }) => {\n      const res = await apiRequest(\"PUT\", `/api/shifts/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/shifts\"] });\n      setShowEditModal(false);\n      setSelectedShift(null);\n      form.reset();\n      toast({\n        title: \"BaÅarÄ±lÄ±\",\n        description: \"Vardiya baÅarÄ±yla gÃ¼ncellendi\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleAddShift = (data: ShiftForm) => {\n    createShiftMutation.mutate(data);\n  };\n\n  const handleEditShift = (data: ShiftForm) => {\n    if (selectedShift) {\n      updateShiftMutation.mutate({\n        id: selectedShift.id,\n        data,\n      });\n    }\n  };\n\n  const openAddModal = () => {\n    form.reset();\n    if (user?.role === 'branch_admin' && user.branchId) {\n      form.setValue('branchId', user.branchId);\n    }\n    setShowAddModal(true);\n  };\n\n  const openEditModal = (shift: Shift) => {\n    setSelectedShift(shift);\n    form.reset({\n      name: shift.name,\n      type: shift.type,\n      startTime: shift.startTime,\n      endTime: shift.endTime,\n      branchId: shift.branchId,\n      isActive: shift.isActive,\n    });\n    setShowEditModal(true);\n  };\n\n  const getBranchName = (branchId: string) => {\n    const branch = branches.find(b => b.id === branchId);\n    return branch?.name || \"Bilinmeyen Åube\";\n  };\n\n  const canManageShifts = user?.role === 'super_admin' || user?.role === 'admin' || user?.role === 'branch_admin';\n  const availableBranches = user?.role === 'branch_admin' && user.branchId\n    ? branches.filter(b => b.id === user.branchId)\n    : branches;\n\n  return (\n    <MainLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Vardiya YÃ¶netimi</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              ÃalÄ±Åma vardiyalarÄ±nÄ± oluÅturun ve yÃ¶netin\n            </p>\n          </div>\n          {canManageShifts && (\n            <Button onClick={openAddModal} data-testid=\"button-add-shift\">\n              <Plus className=\"w-4 h-4 mr-2\" />\n              Yeni Vardiya\n            </Button>\n          )}\n        </div>\n\n        {/* Shifts Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {shiftsLoading ? (\n            // Loading skeletons\n            Array.from({ length: 6 }).map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-3\">\n                    <div className=\"h-4 bg-muted rounded w-3/4\" />\n                    <div className=\"h-3 bg-muted rounded w-1/2\" />\n                    <div className=\"h-3 bg-muted rounded w-2/3\" />\n                  </div>\n                </CardContent>\n              </Card>\n            ))\n          ) : shifts.length === 0 ? (\n            <div className=\"col-span-full text-center py-12\">\n              <Clock className=\"w-12 h-12 mx-auto text-muted-foreground mb-4\" />\n              <p className=\"text-muted-foreground\">HenÃ¼z vardiya eklenmemiÅ</p>\n              {canManageShifts && (\n                <Button onClick={openAddModal} className=\"mt-4\" data-testid=\"button-add-first-shift\">\n                  <Plus className=\"w-4 h-4 mr-2\" />\n                  Ä°lk VardiyayÄ± Ekle\n                </Button>\n              )}\n            </div>\n          ) : (\n            shifts.map((shift) => {\n              const IconComponent = shiftTypeIcons[shift.type];\n              const typeColor = shiftTypeColors[shift.type];\n              const typeLabel = shiftTypeLabels[shift.type];\n\n              return (\n                <Card\n                  key={shift.id}\n                  className=\"cursor-pointer hover:shadow-lg transition-shadow\"\n                  onClick={() => setSelectedShift(shift)}\n                  data-testid={`card-shift-${shift.id}`}\n                >\n                  <CardContent className=\"p-6\">\n                    <div className=\"space-y-4\">\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex items-start space-x-3\">\n                          <div className={`w-10 h-10 ${typeColor.replace('text-', 'bg-')}/10 rounded-lg flex items-center justify-center`}>\n                            <IconComponent className={`w-5 h-5 ${typeColor}`} />\n                          </div>\n                          <div>\n                            <h3 className=\"font-semibold text-lg\">{shift.name}</h3>\n                            <Badge variant=\"outline\" className=\"mt-1\">\n                              {typeLabel}\n                            </Badge>\n                          </div>\n                        </div>\n                        <Badge variant={shift.isActive ? \"default\" : \"secondary\"}>\n                          {shift.isActive ? \"Aktif\" : \"Pasif\"}\n                        </Badge>\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">BaÅlangÄ±Ã§:</span>\n                          <span className=\"font-medium\">{shift.startTime}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">BitiÅ:</span>\n                          <span className=\"font-medium\">{shift.endTime}</span>\n                        </div>\n                        <div className=\"flex items-center justify-between text-sm\">\n                          <span className=\"text-muted-foreground\">Åube:</span>\n                          <span className=\"font-medium\">{getBranchName(shift.branchId)}</span>\n                        </div>\n                      </div>\n\n                      <div className=\"flex space-x-2 pt-2\">\n                        <Button\n                          size=\"sm\"\n                          variant=\"outline\"\n                          onClick={(e) => {\n                            e.stopPropagation();\n                            setSelectedShift(shift);\n                          }}\n                          data-testid={`button-view-${shift.id}`}\n                        >\n                          <Eye className=\"w-4 h-4 mr-1\" />\n                          GÃ¶rÃ¼ntÃ¼le\n                        </Button>\n                        {canManageShifts && (\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              openEditModal(shift);\n                            }}\n                            data-testid={`button-edit-${shift.id}`}\n                          >\n                            <Edit className=\"w-4 h-4 mr-1\" />\n                            DÃ¼zenle\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })\n          )}\n        </div>\n      </div>\n\n      {/* Shift Detail Modal */}\n      <DetailModal\n        open={!!selectedShift && !showEditModal}\n        onOpenChange={(open) => !open && setSelectedShift(null)}\n        title=\"Vardiya DetaylarÄ±\"\n      >\n        {selectedShift && (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Vardiya AdÄ±</label>\n                <p className=\"mt-1 text-foreground\">{selectedShift.name}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Tip</label>\n                <Badge variant=\"outline\" className=\"mt-1\">\n                  {shiftTypeLabels[selectedShift.type]}\n                </Badge>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">BaÅlangÄ±Ã§ Saati</label>\n                <p className=\"mt-1 text-foreground\">{selectedShift.startTime}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">BitiÅ Saati</label>\n                <p className=\"mt-1 text-foreground\">{selectedShift.endTime}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Åube</label>\n                <p className=\"mt-1 text-foreground\">{getBranchName(selectedShift.branchId)}</p>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">Durum</label>\n                <Badge variant={selectedShift.isActive ? \"default\" : \"secondary\"} className=\"mt-1\">\n                  {selectedShift.isActive ? \"Aktif\" : \"Pasif\"}\n                </Badge>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium text-muted-foreground\">OluÅturulma Tarihi</label>\n                <p className=\"mt-1 text-foreground\">\n                  {new Date(selectedShift.createdAt).toLocaleDateString('tr-TR')}\n                </p>\n              </div>\n            </div>\n\n            {canManageShifts && (\n              <div className=\"flex space-x-3\">\n                <Button\n                  onClick={() => openEditModal(selectedShift)}\n                  data-testid=\"button-edit-shift\"\n                >\n                  DÃ¼zenle\n                </Button>\n                <Button variant=\"secondary\" data-testid=\"button-assign-personnel\">\n                  Personel Atama\n                </Button>\n              </div>\n            )}\n          </div>\n        )}\n      </DetailModal>\n\n      {/* Add/Edit Shift Modal */}\n      <DetailModal\n        open={showAddModal || showEditModal}\n        onOpenChange={(open) => {\n          if (!open) {\n            setShowAddModal(false);\n            setShowEditModal(false);\n            setSelectedShift(null);\n            form.reset();\n          }\n        }}\n        title={showEditModal ? \"Vardiya DÃ¼zenle\" : \"Yeni Vardiya Ekle\"}\n      >\n        <Form {...form}>\n          <form\n            onSubmit={form.handleSubmit(showEditModal ? handleEditShift : handleAddShift)}\n            className=\"space-y-6\"\n          >\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Vardiya AdÄ± *</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Vardiya adÄ±nÄ± girin\"\n                      {...field}\n                      data-testid=\"input-shift-name\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"type\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Vardiya Tipi *</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-shift-type\">\n                        <SelectValue placeholder=\"Vardiya tipini seÃ§in\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"sabah\">Sabah</SelectItem>\n                      <SelectItem value=\"oglen\">ÃÄlen</SelectItem>\n                      <SelectItem value=\"aksam\">AkÅam</SelectItem>\n                      <SelectItem value=\"gece\">Gece</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"grid grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"startTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>BaÅlangÄ±Ã§ Saati *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"time\"\n                        {...field}\n                        data-testid=\"input-shift-start-time\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"endTime\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>BitiÅ Saati *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"time\"\n                        {...field}\n                        data-testid=\"input-shift-end-time\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"branchId\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Åube *</FormLabel>\n                  <Select onValueChange={field.onChange} value={field.value}>\n                    <FormControl>\n                      <SelectTrigger data-testid=\"select-shift-branch\">\n                        <SelectValue placeholder=\"Åube seÃ§in\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      {availableBranches.map((branch) => (\n                        <SelectItem key={branch.id} value={branch.id}>\n                          {branch.name}\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <div className=\"flex space-x-3\">\n              <Button\n                type=\"submit\"\n                disabled={createShiftMutation.isPending || updateShiftMutation.isPending}\n                data-testid=\"button-submit-shift\"\n              >\n                {createShiftMutation.isPending || updateShiftMutation.isPending\n                  ? \"Kaydediliyor...\"\n                  : showEditModal\n                  ? \"GÃ¼ncelle\"\n                  : \"Ekle\"}\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => {\n                  setShowAddModal(false);\n                  setShowEditModal(false);\n                  setSelectedShift(null);\n                  form.reset();\n                }}\n                data-testid=\"button-cancel-shift\"\n              >\n                Ä°ptal\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DetailModal>\n    </MainLayout>\n  );\n}\n","size_bytes":18695},"client/src/pages/system-settings.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Settings, Save, Bell, Shield, Database, Mail, Phone, Clock } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport MainLayout from \"@/components/layout/main-layout\";\n\ninterface SystemSettings {\n  id?: string;\n  companyName: string;\n  companyAddress: string;\n  companyPhone: string;\n  companyEmail: string;\n  workHours: {\n    start: string;\n    end: string;\n    lunchBreak: number;\n  };\n  notifications: {\n    emailEnabled: boolean;\n    smsEnabled: boolean;\n    lateArrivalAlert: boolean;\n    absenceAlert: boolean;\n  };\n  attendance: {\n    graceMinutes: number;\n    autoClockOut: boolean;\n    requireLocationCheck: boolean;\n  };\n  backup: {\n    autoBackup: boolean;\n    backupFrequency: string;\n    retentionDays: number;\n  };\n}\n\nexport default function SystemSettings() {\n  const { toast } = useToast();\n  const [activeTab, setActiveTab] = useState(\"general\");\n\n  const { data: settings, isLoading } = useQuery<SystemSettings>({\n    queryKey: [\"/api/settings\"],\n  });\n\n  const [formData, setFormData] = useState<SystemSettings>({\n    companyName: \"\",\n    companyAddress: \"\",\n    companyPhone: \"\",\n    companyEmail: \"\",\n    workHours: {\n      start: \"09:00\",\n      end: \"18:00\",\n      lunchBreak: 60,\n    },\n    notifications: {\n      emailEnabled: true,\n      smsEnabled: true,\n      lateArrivalAlert: true,\n      absenceAlert: true,\n    },\n    attendance: {\n      graceMinutes: 15,\n      autoClockOut: false,\n      requireLocationCheck: false,\n    },\n    backup: {\n      autoBackup: true,\n      backupFrequency: \"daily\",\n      retentionDays: 30,\n    },\n  });\n\n  // Initialize form data when settings are loaded\n  React.useEffect(() => {\n    if (settings) {\n      setFormData(settings);\n    }\n  }, [settings]);\n\n  const updateSettingsMutation = useMutation({\n    mutationFn: async (data: SystemSettings) => {\n      const res = await apiRequest(\"PUT\", \"/api/settings\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/settings\"] });\n      toast({\n        title: \"BaÅarÄ±lÄ±\",\n        description: \"Sistem ayarlarÄ± gÃ¼ncellendi\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSave = () => {\n    updateSettingsMutation.mutate(formData);\n  };\n\n  const updateFormData = (section: keyof SystemSettings, field: string, value: any) => {\n    setFormData(prev => ({\n      ...prev,\n      [section]: typeof prev[section] === 'object' ? {\n        ...prev[section],\n        [field]: value\n      } : value\n    }));\n  };\n\n  if (isLoading) {\n    return (\n      <MainLayout>\n        <div className=\"flex items-center justify-center min-h-[400px]\">\n          <div className=\"text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto\"></div>\n            <p className=\"mt-2 text-muted-foreground\">Sistem ayarlarÄ± yÃ¼kleniyor...</p>\n          </div>\n        </div>\n      </MainLayout>\n    );\n  }\n\n  return (\n    <MainLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex justify-between items-center\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Sistem AyarlarÄ±</h1>\n            <p className=\"text-muted-foreground\">Sistem konfigÃ¼rasyonlarÄ±nÄ± yÃ¶netin</p>\n          </div>\n          <Button \n            onClick={handleSave}\n            disabled={updateSettingsMutation.isPending}\n            data-testid=\"button-save-settings\"\n          >\n            <Save className=\"mr-2 h-4 w-4\" />\n            {updateSettingsMutation.isPending ? \"Kaydediliyor...\" : \"AyarlarÄ± Kaydet\"}\n          </Button>\n        </div>\n\n        <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-4\">\n          <TabsList className=\"grid grid-cols-4 w-full\">\n            <TabsTrigger value=\"general\">Genel</TabsTrigger>\n            <TabsTrigger value=\"attendance\">Devam</TabsTrigger>\n            <TabsTrigger value=\"notifications\">Bildirimler</TabsTrigger>\n            <TabsTrigger value=\"backup\">Yedekleme</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"general\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Settings className=\"mr-2 h-5 w-5\" />\n                  Åirket Bilgileri\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"companyName\">Åirket AdÄ±</Label>\n                    <Input\n                      id=\"companyName\"\n                      value={formData.companyName}\n                      onChange={(e) => setFormData(prev => ({ ...prev, companyName: e.target.value }))}\n                      data-testid=\"input-company-name\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"companyPhone\">Åirket Telefonu</Label>\n                    <Input\n                      id=\"companyPhone\"\n                      value={formData.companyPhone}\n                      onChange={(e) => setFormData(prev => ({ ...prev, companyPhone: e.target.value }))}\n                      data-testid=\"input-company-phone\"\n                    />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"companyAddress\">Åirket Adresi</Label>\n                  <Input\n                    id=\"companyAddress\"\n                    value={formData.companyAddress}\n                    onChange={(e) => setFormData(prev => ({ ...prev, companyAddress: e.target.value }))}\n                    data-testid=\"input-company-address\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"companyEmail\">Åirket E-posta</Label>\n                  <Input\n                    id=\"companyEmail\"\n                    type=\"email\"\n                    value={formData.companyEmail}\n                    onChange={(e) => setFormData(prev => ({ ...prev, companyEmail: e.target.value }))}\n                    data-testid=\"input-company-email\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Clock className=\"mr-2 h-5 w-5\" />\n                  ÃalÄ±Åma Saatleri\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"workStart\">BaÅlama Saati</Label>\n                    <Input\n                      id=\"workStart\"\n                      type=\"time\"\n                      value={formData.workHours.start}\n                      onChange={(e) => updateFormData('workHours', 'start', e.target.value)}\n                      data-testid=\"input-work-start\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"workEnd\">BitiÅ Saati</Label>\n                    <Input\n                      id=\"workEnd\"\n                      type=\"time\"\n                      value={formData.workHours.end}\n                      onChange={(e) => updateFormData('workHours', 'end', e.target.value)}\n                      data-testid=\"input-work-end\"\n                    />\n                  </div>\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"lunchBreak\">ÃÄle MolasÄ± (dakika)</Label>\n                    <Input\n                      id=\"lunchBreak\"\n                      type=\"number\"\n                      value={formData.workHours.lunchBreak}\n                      onChange={(e) => updateFormData('workHours', 'lunchBreak', parseInt(e.target.value))}\n                      data-testid=\"input-lunch-break\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"attendance\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Shield className=\"mr-2 h-5 w-5\" />\n                  Devam Takibi AyarlarÄ±\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"graceMinutes\">HoÅgÃ¶rÃ¼ SÃ¼resi (dakika)</Label>\n                  <Input\n                    id=\"graceMinutes\"\n                    type=\"number\"\n                    value={formData.attendance.graceMinutes}\n                    onChange={(e) => updateFormData('attendance', 'graceMinutes', parseInt(e.target.value))}\n                    data-testid=\"input-grace-minutes\"\n                  />\n                  <p className=\"text-sm text-muted-foreground\">\n                    GeÃ§ gelme olarak sayÄ±lmadan Ã¶nce tolerans sÃ¼resi\n                  </p>\n                </div>\n\n                <Separator />\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Otomatik ÃÄ±kÄ±Å</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Mesai saati sonunda otomatik Ã§Ä±kÄ±Å kaydÄ± oluÅtur\n                    </p>\n                  </div>\n                  <Switch\n                    checked={formData.attendance.autoClockOut}\n                    onCheckedChange={(checked) => updateFormData('attendance', 'autoClockOut', checked)}\n                    data-testid=\"switch-auto-clock-out\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Konum KontrolÃ¼</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      QR kod okutmalarÄ±nda konum doÄrulamasÄ± yap\n                    </p>\n                  </div>\n                  <Switch\n                    checked={formData.attendance.requireLocationCheck}\n                    onCheckedChange={(checked) => updateFormData('attendance', 'requireLocationCheck', checked)}\n                    data-testid=\"switch-location-check\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"notifications\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Bell className=\"mr-2 h-5 w-5\" />\n                  Bildirim AyarlarÄ±\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"flex items-center\">\n                      <Mail className=\"mr-2 h-4 w-4\" />\n                      E-posta Bildirimleri\n                    </Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Sistem bildirimlerini e-posta ile gÃ¶nder\n                    </p>\n                  </div>\n                  <Switch\n                    checked={formData.notifications.emailEnabled}\n                    onCheckedChange={(checked) => updateFormData('notifications', 'emailEnabled', checked)}\n                    data-testid=\"switch-email-notifications\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label className=\"flex items-center\">\n                      <Phone className=\"mr-2 h-4 w-4\" />\n                      SMS Bildirimleri\n                    </Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Sistem bildirimlerini SMS ile gÃ¶nder\n                    </p>\n                  </div>\n                  <Switch\n                    checked={formData.notifications.smsEnabled}\n                    onCheckedChange={(checked) => updateFormData('notifications', 'smsEnabled', checked)}\n                    data-testid=\"switch-sms-notifications\"\n                  />\n                </div>\n\n                <Separator />\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>GeÃ§ Gelme UyarÄ±sÄ±</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Personel geÃ§ geldiÄinde bildirim gÃ¶nder\n                    </p>\n                  </div>\n                  <Switch\n                    checked={formData.notifications.lateArrivalAlert}\n                    onCheckedChange={(checked) => updateFormData('notifications', 'lateArrivalAlert', checked)}\n                    data-testid=\"switch-late-arrival-alert\"\n                  />\n                </div>\n\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>DevamsÄ±zlÄ±k UyarÄ±sÄ±</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Personel hiÃ§ gelmediÄinde bildirim gÃ¶nder\n                    </p>\n                  </div>\n                  <Switch\n                    checked={formData.notifications.absenceAlert}\n                    onCheckedChange={(checked) => updateFormData('notifications', 'absenceAlert', checked)}\n                    data-testid=\"switch-absence-alert\"\n                  />\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"backup\" className=\"space-y-4\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center\">\n                  <Database className=\"mr-2 h-5 w-5\" />\n                  Yedekleme AyarlarÄ±\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"space-y-0.5\">\n                    <Label>Otomatik Yedekleme</Label>\n                    <p className=\"text-sm text-muted-foreground\">\n                      Sistem verilerini otomatik olarak yedekle\n                    </p>\n                  </div>\n                  <Switch\n                    checked={formData.backup.autoBackup}\n                    onCheckedChange={(checked) => updateFormData('backup', 'autoBackup', checked)}\n                    data-testid=\"switch-auto-backup\"\n                  />\n                </div>\n\n                {formData.backup.autoBackup && (\n                  <>\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"backupFrequency\">Yedekleme SÄ±klÄ±ÄÄ±</Label>\n                      <select\n                        id=\"backupFrequency\"\n                        className=\"w-full p-2 border rounded-md\"\n                        value={formData.backup.backupFrequency}\n                        onChange={(e) => updateFormData('backup', 'backupFrequency', e.target.value)}\n                        data-testid=\"select-backup-frequency\"\n                      >\n                        <option value=\"daily\">GÃ¼nlÃ¼k</option>\n                        <option value=\"weekly\">HaftalÄ±k</option>\n                        <option value=\"monthly\">AylÄ±k</option>\n                      </select>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"retentionDays\">Saklama SÃ¼resi (gÃ¼n)</Label>\n                      <Input\n                        id=\"retentionDays\"\n                        type=\"number\"\n                        value={formData.backup.retentionDays}\n                        onChange={(e) => updateFormData('backup', 'retentionDays', parseInt(e.target.value))}\n                        data-testid=\"input-retention-days\"\n                      />\n                      <p className=\"text-sm text-muted-foreground\">\n                        Eski yedekler bu sÃ¼re sonunda silinir\n                      </p>\n                    </div>\n                  </>\n                )}\n\n                <Separator />\n\n                <div className=\"space-y-2\">\n                  <Button variant=\"outline\" className=\"w-full\" data-testid=\"button-manual-backup\">\n                    <Database className=\"mr-2 h-4 w-4\" />\n                    Manuel Yedekleme BaÅlat\n                  </Button>\n                  <p className=\"text-sm text-muted-foreground text-center\">\n                    Son yedekleme: HenÃ¼z yedekleme yapÄ±lmadÄ±\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </MainLayout>\n  );\n}","size_bytes":17954},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Menu, Search, Bell, ChevronDown, LogOut } from \"lucide-react\";\n\ninterface HeaderProps {\n  onMenuClick: () => void;\n  onToggleSidebar: () => void;\n  sidebarCollapsed: boolean;\n}\n\nexport default function Header({ onMenuClick, onToggleSidebar, sidebarCollapsed }: HeaderProps) {\n  const { user, logoutMutation } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const userInitials = user?.name\n    ?.split(\" \")\n    .map(n => n[0])\n    .join(\"\")\n    .toUpperCase() || \"??\";\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border\">\n      <div className=\"flex items-center justify-between h-16 px-4\">\n        <div className=\"flex items-center space-x-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onMenuClick}\n            className=\"md:hidden\"\n            data-testid=\"button-open-sidebar\"\n          >\n            <Menu className=\"w-5 h-5\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={onToggleSidebar}\n            className=\"hidden md:block\"\n            data-testid=\"button-toggle-sidebar\"\n          >\n            <Menu className=\"w-5 h-5\" />\n          </Button>\n          <h1 className=\"text-xl font-semibold\">Dashboard</h1>\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Search */}\n          <div className=\"hidden sm:block\">\n            <div className=\"relative\">\n              <Input\n                type=\"search\"\n                placeholder=\"Personel ara...\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"w-64 pl-10\"\n                data-testid=\"input-search\"\n              />\n              <Search className=\"absolute left-3 top-2.5 w-4 h-4 text-muted-foreground\" />\n            </div>\n          </div>\n          \n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"sm\" className=\"relative\" data-testid=\"button-notifications\">\n            <Bell className=\"w-5 h-5\" />\n            <span className=\"absolute -top-1 -right-1 w-3 h-3 bg-destructive rounded-full\" />\n          </Button>\n          \n          {/* User Menu */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <Button variant=\"ghost\" className=\"flex items-center space-x-2\" data-testid=\"button-user-menu\">\n                <div className=\"w-8 h-8 bg-accent rounded-full flex items-center justify-center\">\n                  <span className=\"text-sm font-medium text-accent-foreground\">\n                    {userInitials}\n                  </span>\n                </div>\n                <ChevronDown className=\"w-4 h-4\" />\n              </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\">\n              <DropdownMenuItem \n                onClick={handleLogout}\n                disabled={logoutMutation.isPending}\n                data-testid=\"button-logout\"\n              >\n                <LogOut className=\"w-4 h-4 mr-2\" />\n                ÃÄ±kÄ±Å Yap\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3600},"client/src/components/layout/main-layout.tsx":{"content":"import { useState } from \"react\";\nimport Sidebar from \"./sidebar\";\nimport Header from \"./header\";\n\ninterface MainLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function MainLayout({ children }: MainLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(true);\n  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);\n\n  return (\n    <div className=\"flex h-screen overflow-hidden\">\n      <Sidebar \n        open={sidebarOpen}\n        collapsed={sidebarCollapsed}\n        onClose={() => setSidebarOpen(false)}\n      />\n      \n      <div className=\"flex-1 flex flex-col overflow-hidden\">\n        <Header \n          onMenuClick={() => setSidebarOpen(true)}\n          onToggleSidebar={() => setSidebarCollapsed(!sidebarCollapsed)}\n          sidebarCollapsed={sidebarCollapsed}\n        />\n        \n        <main className=\"flex-1 overflow-y-auto p-6 bg-background\">\n          {children}\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":960},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { \n  Users, \n  Building, \n  Clock, \n  Calendar, \n  QrCode, \n  BarChart3, \n  LayoutDashboard,\n  X,\n  UserCheck,\n  Settings\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SidebarProps {\n  open: boolean;\n  collapsed: boolean;\n  onClose: () => void;\n}\n\nconst menuItems = [\n  {\n    name: \"Dashboard\",\n    href: \"/\",\n    icon: LayoutDashboard,\n  },\n  {\n    name: \"Personel YÃ¶netimi\",\n    href: \"/personnel\",\n    icon: Users,\n  },\n  {\n    name: \"Åube YÃ¶netimi\",\n    href: \"/branches\",\n    icon: Building,\n  },\n  {\n    name: \"Vardiya YÃ¶netimi\", \n    href: \"/shifts\",\n    icon: Clock,\n  },\n  {\n    name: \"Ä°zin YÃ¶netimi\",\n    href: \"/leave\",\n    icon: Calendar,\n  },\n  {\n    name: \"Takvim\",\n    href: \"/calendar\",\n    icon: Calendar,\n  },\n  {\n    name: \"Devam Takibi\",\n    href: \"/attendance\",\n    icon: UserCheck,\n  },\n  {\n    name: \"QR Kod Kontrol\",\n    href: \"/qr-control\",\n    icon: QrCode,\n  },\n  {\n    name: \"Raporlar\",\n    href: \"/reports\",\n    icon: BarChart3,\n  },\n  {\n    name: \"Sistem AyarlarÄ±\",\n    href: \"/settings\",\n    icon: Settings,\n  },\n];\n\nexport default function Sidebar({ open, collapsed, onClose }: SidebarProps) {\n  const { user } = useAuth();\n  const [location] = useLocation();\n\n  const userInitials = user?.name\n    ?.split(\" \")\n    .map(n => n[0])\n    .join(\"\")\n    .toUpperCase() || \"??\";\n\n  return (\n    <>\n      {/* Mobile backdrop */}\n      {open && (\n        <div \n          className=\"fixed inset-0 bg-black/50 z-40 md:hidden\" \n          onClick={onClose}\n        />\n      )}\n      \n      {/* Sidebar */}\n      <aside \n        className={cn(\n          \"fixed inset-y-0 left-0 z-50 bg-card border-r border-border transform transition-transform duration-300 ease-in-out md:relative md:translate-x-0\",\n          open ? \"translate-x-0\" : \"-translate-x-full\",\n          collapsed ? \"w-16\" : \"w-64\"\n        )}\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Logo */}\n          <div className=\"flex items-center justify-between h-16 px-4 border-b border-border\">\n            <div className=\"flex items-center space-x-2\">\n              <div className=\"w-8 h-8 bg-primary rounded-lg flex items-center justify-center\">\n                <Users className=\"w-5 h-5 text-primary-foreground\" />\n              </div>\n              {!collapsed && (\n                <span className=\"font-semibold text-lg text-foreground\">PTS</span>\n              )}\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              className=\"md:hidden\"\n              data-testid=\"button-close-sidebar\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n\n          {/* Navigation Menu */}\n          <nav className=\"flex-1 px-4 py-4 space-y-2\">\n            {menuItems.map((item) => {\n              const isActive = location === item.href || \n                (item.href !== \"/\" && location.startsWith(item.href));\n              \n              return (\n                <Link key={item.name} href={item.href}>\n                  <div \n                    className={cn(\n                      \"flex items-center space-x-3 px-3 py-2 rounded-lg transition-colors cursor-pointer\",\n                      isActive \n                        ? \"bg-primary text-primary-foreground\" \n                        : \"text-muted-foreground hover:bg-secondary hover:text-foreground\"\n                    )}\n                    data-testid={`link-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <item.icon className=\"w-5 h-5\" />\n                    {!collapsed && (\n                      <span className=\"sidebar-text\">{item.name}</span>\n                    )}\n                  </div>\n                </Link>\n              );\n            })}\n          </nav>\n\n          {/* User Profile */}\n          <div className=\"p-4 border-t border-border\">\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"w-8 h-8 bg-accent rounded-full flex items-center justify-center\">\n                <span className=\"text-sm font-medium text-accent-foreground\">\n                  {userInitials}\n                </span>\n              </div>\n              {!collapsed && (\n                <div className=\"sidebar-text\">\n                  <p className=\"text-sm font-medium\" data-testid=\"text-user-name\">\n                    {user?.name}\n                  </p>\n                  <p className=\"text-xs text-muted-foreground\" data-testid=\"text-user-role\">\n                    {user?.role === 'super_admin' ? 'SÃ¼per Admin' :\n                     user?.role === 'admin' ? 'Admin' : 'Åube Admin'}\n                  </p>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </aside>\n    </>\n  );\n}\n","size_bytes":4963},"client/src/components/modals/detail-modal.tsx":{"content":"import { useState } from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface DetailModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  title: string;\n  children: React.ReactNode;\n}\n\nexport function DetailModal({ open, onOpenChange, title, children }: DetailModalProps) {\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-detail\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"text-modal-title\">{title}</DialogTitle>\n          <DialogDescription>\n            DetaylÄ± bilgileri gÃ¶rÃ¼ntÃ¼leyin ve dÃ¼zenleyin\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"space-y-4\">\n          {children}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":956},"client/src/components/modals/personnel-modal.tsx":{"content":"import { useState } from \"react\";\nimport * as React from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Personnel, InsertPersonnel, insertPersonnelSchema, Branch, Attendance, LeaveRequest, PersonnelDocument, PersonnelFinancialInfo, PersonnelEducation } from \"@shared/schema\";\nimport { User, Clock, Calendar, FileText, Phone, Mail, MapPin, Building, CreditCard, GraduationCap, Briefcase, UserCheck, CalendarDays, FolderOpen, Upload, Camera } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst personnelFormSchema = insertPersonnelSchema.extend({\n  firstName: z.string().min(2, \"Ad en az 2 karakter olmalÄ±dÄ±r\"),\n  lastName: z.string().min(2, \"Soyad en az 2 karakter olmalÄ±dÄ±r\"),\n  phone: z.string().min(10, \"Telefon numarasÄ± en az 10 karakter olmalÄ±dÄ±r\"),\n  nationalId: z.string().length(11, \"TC Kimlik No 11 karakter olmalÄ±dÄ±r\"),\n  position: z.string().min(2, \"Pozisyon en az 2 karakter olmalÄ±dÄ±r\"),\n});\n\ntype PersonnelForm = z.infer<typeof personnelFormSchema>;\n\ninterface PersonnelModalProps {\n  personnel: Personnel | null;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  mode: 'view' | 'edit' | 'add';\n}\n\nexport function PersonnelModal({ personnel, open, onOpenChange, mode }: PersonnelModalProps) {\n  const [activeTab, setActiveTab] = useState(\"general\");\n  const [isEditingTab, setIsEditingTab] = useState(false);\n  const [photoFile, setPhotoFile] = useState<File | null>(null);\n  const [photoPreview, setPhotoPreview] = useState<string | null>(null);\n  const { toast } = useToast();\n  const { user } = useAuth();\n\n  const { data: branches = [] } = useQuery<Branch[]>({\n    queryKey: [\"/api/branches\"],\n  });\n\n  const { data: attendanceRecords = [] } = useQuery<Attendance[]>({\n    queryKey: [\"/api/attendance\", { personnelId: personnel?.id }],\n    enabled: !!personnel && mode === 'view',\n  });\n\n  const { data: leaveRequests = [] } = useQuery<LeaveRequest[]>({\n    queryKey: [\"/api/leave-requests\", { personnelId: personnel?.id }],\n    enabled: !!personnel && mode === 'view',\n  });\n\n  // Main form for add/edit modes\n  const form = useForm<PersonnelForm>({\n    resolver: zodResolver(personnelFormSchema),\n    defaultValues: {\n      employeeNumber: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      phone: \"\",\n      email: \"\",\n      nationalId: \"\",\n      position: \"\",\n      department: \"\",\n      branchId: \"\",\n      startDate: new Date(),\n      salary: 0,\n      isActive: true,\n    },\n  });\n\n  // Reset form when personnel or mode changes\n  React.useEffect(() => {\n    if (personnel && (mode === 'edit' || mode === 'view')) {\n      form.reset({\n        employeeNumber: personnel.employeeNumber,\n        firstName: personnel.firstName,\n        lastName: personnel.lastName,\n        phone: personnel.phone,\n        email: personnel.email || \"\",\n        nationalId: personnel.nationalId,\n        position: personnel.position,\n        department: personnel.department || \"\",\n        branchId: personnel.branchId,\n        startDate: new Date(personnel.startDate),\n        salary: personnel.salary || 0,\n        isActive: personnel.isActive,\n      });\n    } else if (mode === 'add') {\n      form.reset({\n        employeeNumber: `EMP${Date.now()}`,\n        firstName: \"\",\n        lastName: \"\",\n        phone: \"\",\n        email: \"\",\n        nationalId: \"\",\n        position: \"\",\n        department: \"\",\n        branchId: user?.role === 'branch_admin' && user.branchId ? user.branchId : \"\",\n        startDate: new Date(),\n        salary: 0,\n        isActive: true,\n      });\n    }\n  }, [personnel, mode, form, user]);\n\n  // Inline editing form for view mode tabs\n  const tabEditForm = useForm<PersonnelForm>({\n    resolver: zodResolver(personnelFormSchema),\n    defaultValues: personnel ? {\n      employeeNumber: personnel.employeeNumber,\n      firstName: personnel.firstName,\n      lastName: personnel.lastName,\n      phone: personnel.phone,\n      email: personnel.email || \"\",\n      nationalId: personnel.nationalId,\n      position: personnel.position,\n      department: personnel.department || \"\",\n      branchId: personnel.branchId || \"\",\n      startDate: personnel.startDate ? new Date(personnel.startDate) : new Date(),\n      salary: personnel.salary || 0,\n      isActive: personnel.isActive,\n      address: personnel.address || \"\",\n      birthDate: personnel.birthDate ? new Date(personnel.birthDate) : undefined,\n    } : {},\n  });\n\n  // Reset tab edit form when personnel changes\n  React.useEffect(() => {\n    if (personnel) {\n      tabEditForm.reset({\n        employeeNumber: personnel.employeeNumber,\n        firstName: personnel.firstName,\n        lastName: personnel.lastName,\n        phone: personnel.phone,\n        email: personnel.email || \"\",\n        nationalId: personnel.nationalId,\n        position: personnel.position,\n        department: personnel.department || \"\",\n        branchId: personnel.branchId || \"\",\n        startDate: personnel.startDate ? new Date(personnel.startDate) : new Date(),\n        salary: personnel.salary || 0,\n        isActive: personnel.isActive,\n        address: personnel.address || \"\",\n        birthDate: personnel.birthDate ? new Date(personnel.birthDate) : undefined,\n      });\n    }\n  }, [personnel, tabEditForm]);\n\n  // Tab editing mutation for saving tab data\n  const updateTabDataMutation = useMutation({\n    mutationFn: async (data: Partial<PersonnelForm>) => {\n      if (!personnel) throw new Error(\"No personnel selected\");\n      const res = await apiRequest(\"PUT\", `/api/personnel/${personnel.id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"BaÅarÄ±lÄ±\",\n        description: \"Personel bilgileri gÃ¼ncellendi\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/personnel\"] });\n      setIsEditingTab(false);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"GÃ¼ncelleme sÄ±rasÄ±nda bir hata oluÅtu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Photo upload mutation\n  const uploadPhotoMutation = useMutation({\n    mutationFn: async (file: File) => {\n      if (!personnel) throw new Error(\"No personnel selected\");\n      const formData = new FormData();\n      formData.append('photo', file);\n      \n      const res = await fetch(`/api/personnel/${personnel.id}/photo`, {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!res.ok) {\n        throw new Error('FotoÄraf yÃ¼kleme baÅarÄ±sÄ±z');\n      }\n      \n      return await res.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"BaÅarÄ±lÄ±\",\n        description: \"Profil fotoÄrafÄ± gÃ¼ncellendi\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/personnel\"] });\n      setPhotoFile(null);\n      setPhotoPreview(null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message || \"FotoÄraf yÃ¼kleme sÄ±rasÄ±nda bir hata oluÅtu\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const createPersonnelMutation = useMutation({\n    mutationFn: async (data: InsertPersonnel) => {\n      const res = await apiRequest(\"POST\", \"/api/personnel\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/personnel\"] });\n      onOpenChange(false);\n      toast({\n        title: \"BaÅarÄ±lÄ±\",\n        description: \"Personel baÅarÄ±yla eklendi\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updatePersonnelMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<Personnel> }) => {\n      const res = await apiRequest(\"PUT\", `/api/personnel/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/personnel\"] });\n      onOpenChange(false);\n      toast({\n        title: \"BaÅarÄ±lÄ±\",\n        description: \"Personel baÅarÄ±yla gÃ¼ncellendi\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Hata\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (data: PersonnelForm) => {\n    if (mode === 'add') {\n      createPersonnelMutation.mutate(data);\n    } else if (mode === 'edit' && personnel) {\n      updatePersonnelMutation.mutate({\n        id: personnel.id,\n        data,\n      });\n    }\n  };\n\n  const getBranchName = (branchId: string) => {\n    const branch = branches.find(b => b.id === branchId);\n    return branch?.name || \"Bilinmeyen Åube\";\n  };\n\n  const availableBranches = user?.role === 'branch_admin' && user.branchId\n    ? branches.filter(b => b.id === user.branchId)\n    : branches;\n\n  const getTitle = () => {\n    switch (mode) {\n      case 'add': return \"Yeni Personel Ekle\";\n      case 'edit': return \"Personel DÃ¼zenle\";\n      case 'view': return \"Personel DetaylarÄ±\";\n      default: return \"Personel\";\n    }\n  };\n\n  // Handle photo file selection\n  const handlePhotoChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Validate file type\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"Hata\",\n          description: \"LÃ¼tfen geÃ§erli bir resim dosyasÄ± seÃ§in\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      // Validate file size (max 5MB)\n      if (file.size > 5 * 1024 * 1024) {\n        toast({\n          title: \"Hata\",\n          description: \"Dosya boyutu 5MB'dan kÃ¼Ã§Ã¼k olmalÄ±dÄ±r\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n      \n      setPhotoFile(file);\n      \n      // Create preview URL\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        setPhotoPreview(e.target?.result as string);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  // Upload photo\n  const handlePhotoUpload = () => {\n    if (photoFile) {\n      uploadPhotoMutation.mutate(photoFile);\n    }\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\" data-testid=\"modal-personnel\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"text-personnel-modal-title\">{getTitle()}</DialogTitle>\n          <DialogDescription>\n            {mode === 'view' \n              ? \"Personel bilgilerini gÃ¶rÃ¼ntÃ¼leyin ve yÃ¶netin\"\n              : mode === 'edit'\n              ? \"Personel bilgilerini dÃ¼zenleyin\"\n              : \"Yeni personel bilgilerini girin\"\n            }\n          </DialogDescription>\n        </DialogHeader>\n\n        {mode === 'view' && personnel ? (\n          <Tabs value={activeTab} onValueChange={setActiveTab} className=\"space-y-6\">\n            <TabsList className=\"grid w-full grid-cols-7\">\n              <TabsTrigger value=\"general\" data-testid=\"tab-general\">\n                <User className=\"w-4 h-4 mr-2\" />\n                Genel Bilgi\n              </TabsTrigger>\n              <TabsTrigger value=\"financial\" data-testid=\"tab-financial\">\n                <CreditCard className=\"w-4 h-4 mr-2\" />\n                Mali Bilgiler\n              </TabsTrigger>\n              <TabsTrigger value=\"education\" data-testid=\"tab-education\">\n                <GraduationCap className=\"w-4 h-4 mr-2\" />\n                EÄitim\n              </TabsTrigger>\n              <TabsTrigger value=\"work\" data-testid=\"tab-work\">\n                <Briefcase className=\"w-4 h-4 mr-2\" />\n                Ä°Å Bilgisi\n              </TabsTrigger>\n              <TabsTrigger value=\"leaves\" data-testid=\"tab-leaves\">\n                <CalendarDays className=\"w-4 h-4 mr-2\" />\n                Ä°zin YÃ¶netimi\n              </TabsTrigger>\n              <TabsTrigger value=\"shifts\" data-testid=\"tab-shifts\">\n                <Clock className=\"w-4 h-4 mr-2\" />\n                Vardiya YÃ¶netimi\n              </TabsTrigger>\n              <TabsTrigger value=\"documents\" data-testid=\"tab-documents\">\n                <FolderOpen className=\"w-4 h-4 mr-2\" />\n                Belge YÃ¶netimi\n              </TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"general\" className=\"space-y-6\">\n              {/* Profile Photo Section */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <Camera className=\"w-5 h-5 mr-2\" />\n                    Profil FotoÄrafÄ±\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"flex items-center space-x-6\">\n                  <div className=\"flex-shrink-0\">\n                    <div className=\"w-24 h-24 rounded-full bg-muted flex items-center justify-center overflow-hidden\">\n                      {photoPreview ? (\n                        <img src={photoPreview} alt=\"Preview\" className=\"w-full h-full object-cover\" />\n                      ) : personnel?.profilePhotoUrl ? (\n                        <img src={personnel.profilePhotoUrl} alt=\"Profile\" className=\"w-full h-full object-cover\" />\n                      ) : (\n                        <User className=\"w-12 h-12 text-muted-foreground\" />\n                      )}\n                    </div>\n                  </div>\n                  <div className=\"flex-1 space-y-3\">\n                    {isEditingTab ? (\n                      <div className=\"space-y-2\">\n                        <Input\n                          type=\"file\"\n                          accept=\"image/*\"\n                          onChange={handlePhotoChange}\n                          className=\"cursor-pointer\"\n                          data-testid=\"input-profile-photo\"\n                        />\n                        {photoFile && (\n                          <div className=\"flex space-x-2\">\n                            <Button\n                              size=\"sm\"\n                              onClick={handlePhotoUpload}\n                              disabled={uploadPhotoMutation.isPending}\n                              data-testid=\"button-upload-photo\"\n                            >\n                              {uploadPhotoMutation.isPending ? \"YÃ¼kleniyor...\" : \"FotoÄrafÄ± YÃ¼kle\"}\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"outline\"\n                              onClick={() => {\n                                setPhotoFile(null);\n                                setPhotoPreview(null);\n                              }}\n                              data-testid=\"button-cancel-photo\"\n                            >\n                              Ä°ptal\n                            </Button>\n                          </div>\n                        )}\n                      </div>\n                    ) : (\n                      <div className=\"text-sm text-muted-foreground\">\n                        {personnel?.profilePhotoUrl \n                          ? \"Profil fotoÄrafÄ± mevcut\"\n                          : \"Profil fotoÄrafÄ± eklenmemiÅ\"\n                        }\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"grid grid-cols-2 gap-6\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center\">\n                      <User className=\"w-5 h-5 mr-2\" />\n                      KiÅisel Bilgiler\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {isEditingTab ? (\n                      <Form {...tabEditForm}>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={tabEditForm.control}\n                            name=\"firstName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Ad</FormLabel>\n                                <FormControl>\n                                  <Input {...field} data-testid=\"input-edit-firstName\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={tabEditForm.control}\n                            name=\"lastName\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Soyad</FormLabel>\n                                <FormControl>\n                                  <Input {...field} data-testid=\"input-edit-lastName\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={tabEditForm.control}\n                            name=\"nationalId\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>TC Kimlik No</FormLabel>\n                                <FormControl>\n                                  <Input {...field} maxLength={11} data-testid=\"input-edit-nationalId\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={tabEditForm.control}\n                            name=\"birthDate\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>DoÄum Tarihi</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    type=\"date\"\n                                    value={field.value ? field.value.toISOString().split('T')[0] : ''}\n                                    onChange={(e) => field.onChange(e.target.value ? new Date(e.target.value) : undefined)}\n                                    data-testid=\"input-edit-birthDate\"\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      </Form>\n                    ) : (\n                      <div className=\"grid grid-cols-2 gap-4\">\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Ad</label>\n                          <p className=\"mt-1 text-foreground\">{personnel.firstName}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">Soyad</label>\n                          <p className=\"mt-1 text-foreground\">{personnel.lastName}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">TC Kimlik No</label>\n                          <p className=\"mt-1 text-foreground\">{personnel.nationalId}</p>\n                        </div>\n                        <div>\n                          <label className=\"text-sm font-medium text-muted-foreground\">DoÄum Tarihi</label>\n                          <p className=\"mt-1 text-foreground\">\n                            {personnel.birthDate ? new Date(personnel.birthDate).toLocaleDateString('tr-TR') : \"BelirtilmemiÅ\"}\n                          </p>\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center\">\n                      <Building className=\"w-5 h-5 mr-2\" />\n                      Ä°Å Bilgileri\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Personel No</label>\n                        <p className=\"mt-1 text-foreground\">{personnel.employeeNumber}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Pozisyon</label>\n                        <p className=\"mt-1 text-foreground\">{personnel.position}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Departman</label>\n                        <p className=\"mt-1 text-foreground\">{personnel.department || \"BelirtilmemiÅ\"}</p>\n                      </div>\n                      <div>\n                        <label className=\"text-sm font-medium text-muted-foreground\">Åube</label>\n                        <p className=\"mt-1 text-foreground\">{getBranchName(personnel.branchId)}</p>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <Phone className=\"w-5 h-5 mr-2\" />\n                    Ä°letiÅim Bilgileri\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Telefon</label>\n                      <p className=\"mt-1 text-foreground\">{personnel.phone}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">E-posta</label>\n                      <p className=\"mt-1 text-foreground\">{personnel.email || \"BelirtilmemiÅ\"}</p>\n                    </div>\n                    <div className=\"col-span-2\">\n                      <label className=\"text-sm font-medium text-muted-foreground\">Adres</label>\n                      <p className=\"mt-1 text-foreground\">{personnel.address || \"BelirtilmemiÅ\"}</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"flex justify-between items-center\">\n                <div className=\"flex space-x-3\">\n                  <Button variant=\"secondary\" data-testid=\"button-personnel-reports\">\n                    RaporlarÄ± GÃ¶rÃ¼ntÃ¼le\n                  </Button>\n                </div>\n                <div className=\"flex space-x-2\">\n                  {isEditingTab && (\n                    <>\n                      <Button \n                        onClick={() => {\n                          const data = tabEditForm.getValues();\n                          updateTabDataMutation.mutate(data);\n                        }}\n                        disabled={updateTabDataMutation.isPending}\n                        data-testid=\"button-save-general-tab\"\n                      >\n                        {updateTabDataMutation.isPending ? \"Kaydediliyor...\" : \"Kaydet\"}\n                      </Button>\n                      <Button \n                        variant=\"outline\"\n                        onClick={() => {\n                          setIsEditingTab(false);\n                          // Reset form to original values\n                          if (personnel) {\n                            tabEditForm.reset({\n                              employeeNumber: personnel.employeeNumber,\n                              firstName: personnel.firstName,\n                              lastName: personnel.lastName,\n                              phone: personnel.phone,\n                              email: personnel.email || \"\",\n                              nationalId: personnel.nationalId,\n                              position: personnel.position,\n                              department: personnel.department || \"\",\n                              branchId: personnel.branchId || \"\",\n                              startDate: personnel.startDate ? new Date(personnel.startDate) : new Date(),\n                              salary: personnel.salary || 0,\n                              isActive: personnel.isActive,\n                              address: personnel.address || \"\",\n                              birthDate: personnel.birthDate ? new Date(personnel.birthDate) : undefined,\n                            });\n                          }\n                        }}\n                        data-testid=\"button-cancel-general-tab\"\n                      >\n                        Ä°ptal\n                      </Button>\n                    </>\n                  )}\n                  <Button \n                    onClick={() => setIsEditingTab(!isEditingTab)} \n                    data-testid=\"button-edit-general-tab\"\n                    variant={isEditingTab ? \"secondary\" : \"default\"}\n                  >\n                    {isEditingTab ? \"GÃ¶rÃ¼ntÃ¼leme Moduna GeÃ§\" : \"DÃ¼zenleme Moduna GeÃ§\"}\n                  </Button>\n                </div>\n              </div>\n            </TabsContent>\n\n            <TabsContent value=\"financial\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <CreditCard className=\"w-5 h-5 mr-2\" />\n                    Mali Bilgiler\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">MaaÅ</label>\n                      <p className=\"mt-1 text-foreground\">\n                        {personnel.salary ? `${personnel.salary.toLocaleString('tr-TR')} âº` : \"BelirtilmemiÅ\"}\n                      </p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Banka</label>\n                      <p className=\"mt-1 text-foreground\">BelirtilmemiÅ</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">IBAN</label>\n                      <p className=\"mt-1 text-foreground\">BelirtilmemiÅ</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Vergi NumarasÄ±</label>\n                      <p className=\"mt-1 text-foreground\">BelirtilmemiÅ</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">SGK NumarasÄ±</label>\n                      <p className=\"mt-1 text-foreground\">BelirtilmemiÅ</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Acil Durum Ä°letiÅim</label>\n                      <p className=\"mt-1 text-foreground\">BelirtilmemiÅ</p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"education\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center justify-between\">\n                    <span className=\"flex items-center\">\n                      <GraduationCap className=\"w-5 h-5 mr-2\" />\n                      EÄitim Bilgileri\n                    </span>\n                    <Button size=\"sm\" data-testid=\"button-add-education\">\n                      <GraduationCap className=\"w-4 h-4 mr-2\" />\n                      EÄitim Ekle\n                    </Button>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"space-y-4\">\n                    <div className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-semibold\">Lisans - Bilgisayar MÃ¼hendisliÄi</h4>\n                        <Badge variant=\"default\">TamamlandÄ±</Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Ä°stanbul Teknik Ãniversitesi</p>\n                      <p className=\"text-sm text-muted-foreground\">2018 - 2022</p>\n                      <p className=\"text-sm text-muted-foreground\">Not OrtalamasÄ±: 3.45</p>\n                      <div className=\"mt-3 flex space-x-2\">\n                        <Button size=\"sm\" variant=\"outline\">DÃ¼zenle</Button>\n                        <Button size=\"sm\" variant=\"outline\">Belge GÃ¶rÃ¼ntÃ¼le</Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <h4 className=\"font-semibold\">Lise - Fen Lisesi</h4>\n                        <Badge variant=\"default\">TamamlandÄ±</Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Ä°stanbul Fen Lisesi</p>\n                      <p className=\"text-sm text-muted-foreground\">2014 - 2018</p>\n                      <p className=\"text-sm text-muted-foreground\">Not OrtalamasÄ±: 4.2</p>\n                      <div className=\"mt-3 flex space-x-2\">\n                        <Button size=\"sm\" variant=\"outline\">DÃ¼zenle</Button>\n                        <Button size=\"sm\" variant=\"outline\">Belge GÃ¶rÃ¼ntÃ¼le</Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"border-2 border-dashed border-muted rounded-lg p-6 text-center\">\n                      <GraduationCap className=\"w-10 h-10 text-muted-foreground mx-auto mb-3\" />\n                      <h4 className=\"font-semibold mb-2\">Yeni EÄitim Bilgisi Ekle</h4>\n                      <p className=\"text-sm text-muted-foreground mb-3\">\n                        Personelin eÄitim geÃ§miÅini buraya ekleyebilirsiniz\n                      </p>\n                      <Button variant=\"outline\" data-testid=\"button-add-education-record\">\n                        EÄitim Ekle\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"work\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <Briefcase className=\"w-5 h-5 mr-2\" />\n                    Ä°Å Bilgileri\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Pozisyon</label>\n                      <p className=\"mt-1 text-foreground\">{personnel.position}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Departman</label>\n                      <p className=\"mt-1 text-foreground\">{personnel.department || \"BelirtilmemiÅ\"}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Ä°Åe GiriÅ Tarihi</label>\n                      <p className=\"mt-1 text-foreground\">\n                        {new Date(personnel.startDate).toLocaleDateString('tr-TR')}\n                      </p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">ÃalÄ±Åma Durumu</label>\n                      <p className=\"mt-1\">\n                        <Badge variant={personnel.isActive ? \"default\" : \"destructive\"}>\n                          {personnel.isActive ? \"Aktif\" : \"Pasif\"}\n                        </Badge>\n                      </p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">Åube</label>\n                      <p className=\"mt-1 text-foreground\">{getBranchName(personnel.branchId)}</p>\n                    </div>\n                    <div>\n                      <label className=\"text-sm font-medium text-muted-foreground\">ÃalÄ±Åma SÃ¼resi</label>\n                      <p className=\"mt-1 text-foreground\">\n                        {Math.floor((new Date().getTime() - new Date(personnel.startDate).getTime()) / (1000 * 60 * 60 * 24 * 365))} yÄ±l\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"shifts\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm\">Aktif Vardiya</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-lg font-semibold\">GÃ¼ndÃ¼z VardiyasÄ±</p>\n                    <p className=\"text-sm text-muted-foreground\">08:00 - 17:00</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm\">Bu Hafta</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-lg font-semibold\">5 gÃ¼n</p>\n                    <p className=\"text-sm text-muted-foreground\">Toplam Ã§alÄ±Åma</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm\">Mesai Saati</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-lg font-semibold\">40 saat</p>\n                    <p className=\"text-sm text-muted-foreground\">HaftalÄ±k</p>\n                  </CardContent>\n                </Card>\n              </div>\n              \n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-lg flex items-center\">\n                    <Clock className=\"w-5 h-5 mr-2\" />\n                    Vardiya GeÃ§miÅi\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">GÃ¼ndÃ¼z VardiyasÄ±</p>\n                        <p className=\"text-sm text-muted-foreground\">08:00 - 17:00</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-medium\">Bu Hafta</p>\n                        <Badge variant=\"default\">Aktif</Badge>\n                      </div>\n                    </div>\n                    <div className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">AkÅam VardiyasÄ±</p>\n                        <p className=\"text-sm text-muted-foreground\">16:00 - 00:00</p>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"text-sm font-medium\">GeÃ§en Hafta</p>\n                        <Badge variant=\"secondary\">TamamlandÄ±</Badge>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"attendance\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Son Devam KayÄ±tlarÄ±</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {attendanceRecords.length === 0 ? (\n                    <p className=\"text-muted-foreground text-center py-4\">\n                      HenÃ¼z devam kaydÄ± bulunmamaktadÄ±r\n                    </p>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      {attendanceRecords.slice(0, 10).map((record) => (\n                        <div key={record.id} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                          <div>\n                            <p className=\"font-medium\">\n                              {new Date(record.date).toLocaleDateString('tr-TR')}\n                            </p>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {record.location || \"Lokasyon belirtilmemiÅ\"}\n                            </p>\n                          </div>\n                          <div className=\"text-right\">\n                            <p className=\"text-sm\">\n                              GiriÅ: {record.checkIn ? new Date(record.checkIn).toLocaleTimeString('tr-TR') : \"-\"}\n                            </p>\n                            <p className=\"text-sm\">\n                              ÃÄ±kÄ±Å: {record.checkOut ? new Date(record.checkOut).toLocaleTimeString('tr-TR') : \"-\"}\n                            </p>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"leaves\" className=\"space-y-4\">\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm\">Toplam Ä°zin HakkÄ±</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold\">30 gÃ¼n</p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm\">KullanÄ±lan Ä°zin</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold text-orange-600\">\n                      {leaveRequests.filter(req => req.status === 'approved').length} gÃ¼n\n                    </p>\n                  </CardContent>\n                </Card>\n                <Card>\n                  <CardHeader className=\"pb-2\">\n                    <CardTitle className=\"text-sm\">Kalan Ä°zin</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-2xl font-bold text-green-600\">\n                      {30 - leaveRequests.filter(req => req.status === 'approved').length} gÃ¼n\n                    </p>\n                  </CardContent>\n                </Card>\n              </div>\n              \n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center\">\n                      <CalendarDays className=\"w-5 h-5 mr-2\" />\n                      Ä°zin GeÃ§miÅi\n                    </span>\n                    <Button size=\"sm\" data-testid=\"button-add-leave\">\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      Yeni Ä°zin Ekle\n                    </Button>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  {leaveRequests.length === 0 ? (\n                    <p className=\"text-muted-foreground text-center py-4\">\n                      HenÃ¼z izin talebi bulunmamaktadÄ±r\n                    </p>\n                  ) : (\n                    <div className=\"space-y-3\">\n                      {leaveRequests.map((request) => (\n                        <div key={request.id} className=\"flex items-center justify-between p-3 bg-muted/30 rounded-lg\">\n                          <div>\n                            <div className=\"flex items-center space-x-2\">\n                              <p className=\"font-medium\">{request.type}</p>\n                              <Badge \n                                variant={\n                                  request.status === 'approved' ? 'default' : \n                                  request.status === 'rejected' ? 'destructive' : \n                                  'secondary'\n                                }\n                              >\n                                {request.status === 'approved' ? 'OnaylandÄ±' :\n                                 request.status === 'rejected' ? 'Reddedildi' :\n                                 'Beklemede'}\n                              </Badge>\n                            </div>\n                            <p className=\"text-sm text-muted-foreground\">\n                              {new Date(request.startDate).toLocaleDateString('tr-TR')} - {new Date(request.endDate).toLocaleDateString('tr-TR')}\n                            </p>\n                            {request.reason && (\n                              <p className=\"text-sm text-muted-foreground mt-1\">{request.reason}</p>\n                            )}\n                          </div>\n                          <div className=\"text-right text-sm text-muted-foreground\">\n                            {Math.ceil((new Date(request.endDate).getTime() - new Date(request.startDate).getTime()) / (1000 * 60 * 60 * 24))} gÃ¼n\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"documents\" className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span className=\"flex items-center\">\n                      <FolderOpen className=\"w-5 h-5 mr-2\" />\n                      Belge YÃ¶netimi\n                    </span>\n                    <Button size=\"sm\" data-testid=\"button-add-document\">\n                      <FileText className=\"w-4 h-4 mr-2\" />\n                      Belge Ekle\n                    </Button>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid gap-4\">\n                    <div className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <FileText className=\"w-5 h-5 text-blue-600\" />\n                          <span className=\"font-medium\">SaÄlÄ±k Raporu</span>\n                        </div>\n                        <Badge variant=\"destructive\">SÃ¼resi DolmuÅ</Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Son gÃ¼ncelleme: 15.08.2024</p>\n                      <p className=\"text-sm text-muted-foreground\">BitiÅ tarihi: 15.08.2025</p>\n                      <div className=\"mt-3 flex space-x-2\">\n                        <Button size=\"sm\" variant=\"outline\">GÃ¶rÃ¼ntÃ¼le</Button>\n                        <Button size=\"sm\" variant=\"outline\">Yenile</Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"border rounded-lg p-4\">\n                      <div className=\"flex items-center justify-between mb-2\">\n                        <div className=\"flex items-center space-x-2\">\n                          <FileText className=\"w-5 h-5 text-green-600\" />\n                          <span className=\"font-medium\">Adli Sicil Belgesi</span>\n                        </div>\n                        <Badge variant=\"default\">GeÃ§erli</Badge>\n                      </div>\n                      <p className=\"text-sm text-muted-foreground\">Son gÃ¼ncelleme: 01.01.2025</p>\n                      <p className=\"text-sm text-muted-foreground\">BitiÅ tarihi: 01.01.2026</p>\n                      <div className=\"mt-3 flex space-x-2\">\n                        <Button size=\"sm\" variant=\"outline\">GÃ¶rÃ¼ntÃ¼le</Button>\n                        <Button size=\"sm\" variant=\"outline\">Yenile</Button>\n                      </div>\n                    </div>\n                    \n                    <div className=\"border-2 border-dashed border-muted rounded-lg p-8 text-center\">\n                      <FileText className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-semibold mb-2\">Yeni Belge Ekle</h3>\n                      <p className=\"text-muted-foreground mb-4\">\n                        Personel iÃ§in gerekli belgeleri yÃ¼kleyebilirsiniz\n                      </p>\n                      <Button data-testid=\"button-upload-document\">\n                        Belge YÃ¼kle\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        ) : (\n          // Add/Edit Form\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n              <div className=\"grid grid-cols-2 gap-6\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Ad *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Ad\"\n                          {...field}\n                          data-testid=\"input-personnel-first-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Soyad *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Soyad\"\n                          {...field}\n                          data-testid=\"input-personnel-last-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"nationalId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>TC Kimlik No *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"12345678901\"\n                          {...field}\n                          data-testid=\"input-personnel-national-id\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"phone\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Telefon *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"05xxxxxxxxx\"\n                          {...field}\n                          data-testid=\"input-personnel-phone\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"email\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>E-posta</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          placeholder=\"ornek@email.com\"\n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"input-personnel-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"position\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Pozisyon *</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Pozisyon\"\n                          {...field}\n                          data-testid=\"input-personnel-position\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"department\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Departman</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Departman\"\n                          {...field}\n                          value={field.value || \"\"}\n                          data-testid=\"input-personnel-department\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"branchId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Åube *</FormLabel>\n                      <Select onValueChange={field.onChange} value={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-personnel-branch\">\n                            <SelectValue placeholder=\"Åube seÃ§in\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {availableBranches.map((branch) => (\n                            <SelectItem key={branch.id} value={branch.id}>\n                              {branch.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"flex space-x-3\">\n                <Button\n                  type=\"submit\"\n                  disabled={createPersonnelMutation.isPending || updatePersonnelMutation.isPending}\n                  data-testid=\"button-submit-personnel\"\n                >\n                  {createPersonnelMutation.isPending || updatePersonnelMutation.isPending\n                    ? \"Kaydediliyor...\"\n                    : mode === 'edit'\n                    ? \"GÃ¼ncelle\"\n                    : \"Ekle\"}\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => onOpenChange(false)}\n                  data-testid=\"button-cancel-personnel\"\n                >\n                  Ä°ptal\n                </Button>\n              </div>\n            </form>\n          </Form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":53834},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/stats-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { LucideIcon } from \"lucide-react\";\n\ninterface StatsCardProps {\n  title: string;\n  value: string | number;\n  description?: string;\n  icon: LucideIcon;\n  iconColor?: string;\n  onClick?: () => void;\n}\n\nexport function StatsCard({ \n  title, \n  value, \n  description, \n  icon: Icon, \n  iconColor = \"text-primary\",\n  onClick \n}: StatsCardProps) {\n  return (\n    <Card \n      className={`p-6 ${onClick ? 'cursor-pointer hover:shadow-lg transition-shadow' : ''}`}\n      onClick={onClick}\n      data-testid={`card-stats-${title.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      <CardContent className=\"p-0\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <p className=\"text-sm font-medium text-muted-foreground\">\n              {title}\n            </p>\n            <p className=\"text-2xl font-bold text-foreground\" data-testid={`text-stats-value-${title.toLowerCase().replace(/\\s+/g, '-')}`}>\n              {value}\n            </p>\n          </div>\n          <div className={`w-12 h-12 ${iconColor.replace('text-', 'bg-')}/10 rounded-lg flex items-center justify-center`}>\n            <Icon className={`w-6 h-6 ${iconColor}`} />\n          </div>\n        </div>\n        {description && (\n          <div className=\"mt-2\">\n            <span className=\"text-sm text-accent\">{description}</span>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1456},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/calendar.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport MainLayout from \"@/components/layout/main-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Calendar as CalendarIcon, Plus, Clock, Users, MapPin } from \"lucide-react\";\nimport { Personnel, Attendance, LeaveRequest, Shift } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\n\nconst specialDaySchema = z.object({\n  date: z.string().min(1, \"Tarih seÃ§imi zorunludur\"),\n  title: z.string().min(1, \"BaÅlÄ±k zorunludur\"),\n  description: z.string().optional(),\n  type: z.enum([\"company\", \"birthday\", \"meeting\", \"other\"]),\n});\n\ntype SpecialDayForm = z.infer<typeof specialDaySchema>;\n\n// TÃ¼rkiye'deki resmi tatiller ve dini gÃ¼nler (2025)\nconst HOLIDAYS = {\n  // Resmi tatiller - 2025 TÃ¼rkiye Resmi Tatil GÃ¼nleri\n  \"2025-01-01\": \"YÄ±lbaÅÄ±\",\n  \"2025-04-23\": \"Ulusal Egemenlik ve Ãocuk BayramÄ±\",\n  \"2025-05-01\": \"Ä°ÅÃ§i BayramÄ±\",\n  \"2025-05-19\": \"AtatÃ¼rk'Ã¼ Anma, GenÃ§lik ve Spor BayramÄ±\",\n  \"2025-07-15\": \"Demokrasi ve Milli Birlik GÃ¼nÃ¼\",\n  \"2025-08-30\": \"Zafer BayramÄ±\",\n  \"2025-10-28\": \"Cumhuriyet BayramÄ± Arifesi (YarÄ±m GÃ¼n)\",\n  \"2025-10-29\": \"Cumhuriyet BayramÄ±\",\n  // Dini bayramlar (resmi tatil) - 2025 tarihlerine gÃ¶re gÃ¼ncellenmiÅ\n  \"2025-03-29\": \"Ramazan BayramÄ± Arifesi (YarÄ±m GÃ¼n)\",\n  \"2025-03-30\": \"Ramazan BayramÄ± 1. GÃ¼n\",\n  \"2025-03-31\": \"Ramazan BayramÄ± 2. GÃ¼n\",\n  \"2025-04-01\": \"Ramazan BayramÄ± 3. GÃ¼n\",\n  \"2025-06-05\": \"Kurban BayramÄ± Arifesi (YarÄ±m GÃ¼n)\",\n  \"2025-06-06\": \"Kurban BayramÄ± 1. GÃ¼n\",\n  \"2025-06-07\": \"Kurban BayramÄ± 2. GÃ¼n\",\n  \"2025-06-08\": \"Kurban BayramÄ± 3. GÃ¼n\",\n  \"2025-06-09\": \"Kurban BayramÄ± 4. GÃ¼n\",\n};\n\n// Dini gÃ¼nler ve anma gÃ¼nleri (resmi tatil deÄil) - 2025 tarihlerine gÃ¶re gÃ¼ncellenmiÅ\nconst RELIGIOUS_DAYS = {\n  \"2025-03-01\": \"Ramazan BaÅlangÄ±cÄ±\",\n  \"2025-03-18\": \"Ãanakkale Zaferi ve Åehitleri Anma GÃ¼nÃ¼\",\n  \"2025-03-26\": \"Kadir Gecesi\",\n  \"2025-11-10\": \"AtatÃ¼rk'Ã¼ Anma GÃ¼nÃ¼\",\n  // Kandil gÃ¼nleri - 2025 Hicri takvime gÃ¶re\n  \"2025-01-13\": \"Regaib Kandili\",\n  \"2025-02-08\": \"Mirac Kandili\",\n  \"2025-02-27\": \"Berat Kandili\",\n  \"2025-07-26\": \"Hicri YÄ±lbaÅÄ± (1447)\",\n  \"2025-08-05\": \"AÅure GÃ¼nÃ¼\",\n  \"2025-10-04\": \"Mevlid Kandili\",\n  \"2025-11-02\": \"ÃÃ§ AylarÄ±n BaÅlangÄ±cÄ± (1447)\",\n  \"2025-12-02\": \"Regaib Kandili (1447)\",\n};\n\n// Ãzel gÃ¼nler - Dinamik olarak yÃ¶netilecek\nlet SPECIAL_DAYS: { [key: string]: string } = {\n  \"2025-09-15\": \"Åirket KuruluÅ YÄ±ldÃ¶nÃ¼mÃ¼\",\n  \"2025-12-31\": \"YÄ±lsonu ToplantÄ±sÄ±\",\n};\n\ninterface DayDetailModalProps {\n  date: string;\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nfunction DayDetailModal({ date, open, onOpenChange }: DayDetailModalProps) {\n  const { data: personnel = [] } = useQuery<Personnel[]>({\n    queryKey: [\"/api/personnel\"],\n  });\n\n  const { data: attendance = [] } = useQuery<Attendance[]>({\n    queryKey: [\"/api/attendance\", { date }],\n    enabled: !!date,\n  });\n\n  const { data: leaveRequests = [] } = useQuery<LeaveRequest[]>({\n    queryKey: [\"/api/leave-requests\", { date }],\n    enabled: !!date,\n  });\n\n  const holiday = HOLIDAYS[date as keyof typeof HOLIDAYS];\n  const religiousDay = RELIGIOUS_DAYS[date as keyof typeof RELIGIOUS_DAYS];\n  const specialDay = SPECIAL_DAYS[date as keyof typeof SPECIAL_DAYS];\n  \n  const attendingPersonnel = attendance.filter(a => a.checkIn);\n  const onLeavePersonnel = leaveRequests.filter(req => \n    req.status === 'approved' && \n    new Date(req.startDate) <= new Date(date) && \n    new Date(req.endDate) >= new Date(date)\n  );\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-2xl\" data-testid=\"modal-day-detail\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center\">\n            <CalendarIcon className=\"w-5 h-5 mr-2\" />\n            {new Date(date).toLocaleDateString('tr-TR', { \n              weekday: 'long', \n              year: 'numeric', \n              month: 'long', \n              day: 'numeric' \n            })}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Ãzel GÃ¼nler */}\n          {(holiday || religiousDay || specialDay) && (\n            <Card>\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"text-sm flex items-center\">\n                  <CalendarIcon className=\"w-4 h-4 mr-2\" />\n                  Ãzel GÃ¼nler\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2\">\n                {holiday && (\n                  <div className=\"flex items-center justify-between p-2 bg-red-50 dark:bg-red-900/20 rounded\">\n                    <span className=\"font-medium\">{holiday}</span>\n                    <Badge variant=\"destructive\">Resmi Tatil</Badge>\n                  </div>\n                )}\n                {religiousDay && (\n                  <div className=\"flex items-center justify-between p-2 bg-green-50 dark:bg-green-900/20 rounded\">\n                    <span className=\"font-medium\">{religiousDay}</span>\n                    <Badge className=\"bg-green-600 text-white\">Dini GÃ¼n</Badge>\n                  </div>\n                )}\n                {specialDay && (\n                  <div className=\"flex items-center justify-between p-2 bg-blue-50 dark:bg-blue-900/20 rounded\">\n                    <span className=\"font-medium\">{specialDay}</span>\n                    <Badge variant=\"default\">Ãzel GÃ¼n</Badge>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Ä°Åe Gelenler */}\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm flex items-center\">\n                <Users className=\"w-4 h-4 mr-2\" />\n                Ä°Åe Gelenler ({attendingPersonnel.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {attendingPersonnel.length === 0 ? (\n                <p className=\"text-muted-foreground text-center py-2\">HenÃ¼z kimse gelmemiÅ</p>\n              ) : (\n                <div className=\"space-y-2\">\n                  {attendingPersonnel.map((record) => {\n                    const person = personnel.find(p => p.id === record.personnelId);\n                    return (\n                      <div key={record.id} className=\"flex items-center justify-between p-2 bg-muted/30 rounded\">\n                        <div>\n                          <p className=\"font-medium\">\n                            {person ? `${person.firstName} ${person.lastName}` : \"Bilinmeyen\"}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {person?.position} â¢ {person?.department}\n                          </p>\n                        </div>\n                        <div className=\"text-right text-sm\">\n                          <p className=\"flex items-center\">\n                            <Clock className=\"w-3 h-3 mr-1\" />\n                            {record.checkIn ? new Date(record.checkIn).toLocaleTimeString('tr-TR', { \n                              hour: '2-digit', \n                              minute: '2-digit' \n                            }) : '-'}\n                          </p>\n                          {record.location && (\n                            <p className=\"flex items-center text-muted-foreground\">\n                              <MapPin className=\"w-3 h-3 mr-1\" />\n                              {record.location}\n                            </p>\n                          )}\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Ä°zinliler */}\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm flex items-center\">\n                <CalendarIcon className=\"w-4 h-4 mr-2\" />\n                Ä°zinliler ({onLeavePersonnel.length})\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              {onLeavePersonnel.length === 0 ? (\n                <p className=\"text-muted-foreground text-center py-2\">Ä°zinli personel yok</p>\n              ) : (\n                <div className=\"space-y-2\">\n                  {onLeavePersonnel.map((request) => {\n                    const person = personnel.find(p => p.id === request.personnelId);\n                    return (\n                      <div key={request.id} className=\"flex items-center justify-between p-2 bg-orange-50 dark:bg-orange-900/20 rounded\">\n                        <div>\n                          <p className=\"font-medium\">\n                            {person ? `${person.firstName} ${person.lastName}` : \"Bilinmeyen\"}\n                          </p>\n                          <p className=\"text-sm text-muted-foreground\">{request.type}</p>\n                        </div>\n                        <Badge variant=\"secondary\">Ä°zinli</Badge>\n                      </div>\n                    );\n                  })}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function CalendarPage() {\n  const [selectedDate, setSelectedDate] = useState<string | null>(null);\n  const [currentMonth, setCurrentMonth] = useState(new Date());\n  const [showAddSpecialDay, setShowAddSpecialDay] = useState(false);\n  const [addSpecialDayDate, setAddSpecialDayDate] = useState<string>(\"\");\n  const [, forceUpdate] = useState({});\n  const { toast } = useToast();\n\n  const form = useForm<SpecialDayForm>({\n    resolver: zodResolver(specialDaySchema),\n    defaultValues: {\n      date: \"\",\n      title: \"\",\n      description: \"\",\n      type: \"other\",\n    },\n  });\n\n  // SayfayÄ± yeniden render etmek iÃ§in\n  const triggerRerender = () => forceUpdate({});\n\n  // Takvim iÃ§in gÃ¼nleri oluÅtur\n  const generateCalendarDays = () => {\n    const year = currentMonth.getFullYear();\n    const month = currentMonth.getMonth();\n    \n    const firstDay = new Date(year, month, 1);\n    const lastDay = new Date(year, month + 1, 0);\n    const startCalendar = new Date(firstDay);\n    startCalendar.setDate(startCalendar.getDate() - firstDay.getDay());\n    \n    const days = [];\n    const currentDate = new Date(startCalendar);\n    \n    for (let i = 0; i < 42; i++) {\n      days.push(new Date(currentDate));\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    \n    return days;\n  };\n\n  const days = generateCalendarDays();\n  const today = new Date().toDateString();\n\n  const getDayClass = (day: Date) => {\n    const dateStr = `${day.getFullYear()}-${String(day.getMonth() + 1).padStart(2, '0')}-${String(day.getDate()).padStart(2, '0')}`;\n    const isCurrentMonth = day.getMonth() === currentMonth.getMonth();\n    const isToday = day.toDateString() === today;\n    const isHoliday = HOLIDAYS[dateStr as keyof typeof HOLIDAYS];\n    const isReligiousDay = RELIGIOUS_DAYS[dateStr as keyof typeof RELIGIOUS_DAYS];\n    const isSpecialDay = SPECIAL_DAYS[dateStr as keyof typeof SPECIAL_DAYS];\n    \n    let classes = \"p-2 rounded-lg cursor-pointer transition-colors \";\n    \n    if (!isCurrentMonth) {\n      classes += \"text-muted-foreground \";\n    }\n    \n    if (isToday) {\n      classes += \"bg-primary text-primary-foreground font-bold \";\n    } else if (isHoliday) {\n      classes += \"bg-red-100 dark:bg-red-900/30 text-red-800 dark:text-red-200 \";\n    } else if (isReligiousDay) {\n      classes += \"bg-green-100 dark:bg-green-900/30 text-green-800 dark:text-green-200 \";\n    } else if (isSpecialDay) {\n      classes += \"bg-blue-100 dark:bg-blue-900/30 text-blue-800 dark:text-blue-200 \";\n    } else {\n      classes += \"hover:bg-muted \";\n    }\n    \n    return classes;\n  };\n\n  const nextMonth = () => {\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() + 1));\n  };\n\n  const prevMonth = () => {\n    setCurrentMonth(new Date(currentMonth.getFullYear(), currentMonth.getMonth() - 1));\n  };\n\n  return (\n    <MainLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"text-calendar-title\">\n            Takvim\n          </h1>\n          <Button onClick={() => setShowAddSpecialDay(true)} data-testid=\"button-add-special-day\">\n            <Plus className=\"w-4 h-4 mr-2\" />\n            Ãzel GÃ¼n Ekle\n          </Button>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"text-xl\">\n                {currentMonth.toLocaleDateString('tr-TR', { month: 'long', year: 'numeric' })}\n              </CardTitle>\n              <div className=\"flex space-x-2\">\n                <Button variant=\"outline\" size=\"sm\" onClick={prevMonth} data-testid=\"button-prev-month\">\n                  â\n                </Button>\n                <Button variant=\"outline\" size=\"sm\" onClick={nextMonth} data-testid=\"button-next-month\">\n                  â\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* HaftanÄ±n gÃ¼nleri */}\n            <div className=\"grid grid-cols-7 gap-1 mb-2\">\n              {['Pazar', 'Pazartesi', 'SalÄ±', 'ÃarÅamba', 'PerÅembe', 'Cuma', 'Cumartesi'].map(day => (\n                <div key={day} className=\"p-2 text-center font-medium text-muted-foreground text-sm\">\n                  {day}\n                </div>\n              ))}\n            </div>\n            \n            {/* Takvim gÃ¼nleri */}\n            <div className=\"grid grid-cols-7 gap-1\">\n              {days.map((day, index) => {\n                const dayDateStr = `${day.getFullYear()}-${String(day.getMonth() + 1).padStart(2, '0')}-${String(day.getDate()).padStart(2, '0')}`;\n                const holiday = HOLIDAYS[dayDateStr as keyof typeof HOLIDAYS];\n                const religiousDay = RELIGIOUS_DAYS[dayDateStr as keyof typeof RELIGIOUS_DAYS];\n                const specialDay = SPECIAL_DAYS[dayDateStr as keyof typeof SPECIAL_DAYS];\n                \n                return (\n                  <div\n                    key={index}\n                    className={getDayClass(day)}\n                    onClick={() => setSelectedDate(dayDateStr)}\n                    onDoubleClick={() => {\n                      setAddSpecialDayDate(dayDateStr);\n                      form.setValue(\"date\", dayDateStr);\n                      setShowAddSpecialDay(true);\n                    }}\n                    data-testid={`calendar-day-${dayDateStr}`}\n                  >\n                    <div className=\"text-center\">\n                      <div className=\"text-sm font-medium\">{day.getDate()}</div>\n                      {(holiday || religiousDay || specialDay) && (\n                        <div className=\"text-xs mt-1 space-x-1\">\n                          {holiday && <Badge variant=\"destructive\" className=\"text-xs\">T</Badge>}\n                          {religiousDay && <Badge className=\"text-xs bg-green-600 text-white\">D</Badge>}\n                          {specialDay && <Badge variant=\"default\" className=\"text-xs\">Ã</Badge>}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* AÃ§Ä±klamalar */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm\">Resmi Tatiller</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-red-500 rounded\"></div>\n                <span className=\"text-sm\">KÄ±rmÄ±zÄ± (T)</span>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm\">Dini GÃ¼nler</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-green-500 rounded\"></div>\n                <span className=\"text-sm\">YeÅil (D)</span>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm\">Ãzel GÃ¼nler</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-blue-500 rounded\"></div>\n                <span className=\"text-sm\">Mavi (Ã)</span>\n              </div>\n            </CardContent>\n          </Card>\n          \n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"text-sm\">BugÃ¼n</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 bg-primary rounded\"></div>\n                <span className=\"text-sm\">Koyu mavi</span>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {selectedDate && (\n        <DayDetailModal\n          date={selectedDate}\n          open={!!selectedDate}\n          onOpenChange={(open) => !open && setSelectedDate(null)}\n        />\n      )}\n\n      {/* Add Special Day Modal */}\n      <Dialog open={showAddSpecialDay} onOpenChange={setShowAddSpecialDay}>\n        <DialogContent className=\"max-w-md\" data-testid=\"modal-add-special-day\">\n          <DialogHeader>\n            <DialogTitle>Ãzel GÃ¼n Ekle</DialogTitle>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit((data) => {\n              // Ãzel gÃ¼nÃ¼ SPECIAL_DAYS objesine ekle ve takvimi gÃ¼ncelle\n              SPECIAL_DAYS[data.date] = data.title;\n              \n              toast({\n                title: \"BaÅarÄ±lÄ±\",\n                description: `${data.title} Ã¶zel gÃ¼nÃ¼ ${new Date(data.date).toLocaleDateString('tr-TR')} tarihine eklendi`,\n              });\n              \n              setShowAddSpecialDay(false);\n              form.reset();\n              triggerRerender(); // Takvimi yeniden render et\n            })} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"date\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tarih *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"date\"\n                        {...field}\n                        data-testid=\"input-special-day-date\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"title\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>BaÅlÄ±k *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Ãzel gÃ¼n baÅlÄ±ÄÄ±\"\n                        {...field}\n                        data-testid=\"input-special-day-title\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>TÃ¼r *</FormLabel>\n                    <Select onValueChange={field.onChange} value={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-special-day-type\">\n                          <SelectValue placeholder=\"TÃ¼r seÃ§in\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"company\">Åirket EtkinliÄi</SelectItem>\n                        <SelectItem value=\"birthday\">DoÄum GÃ¼nÃ¼</SelectItem>\n                        <SelectItem value=\"meeting\">ToplantÄ±</SelectItem>\n                        <SelectItem value=\"other\">DiÄer</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>AÃ§Ä±klama</FormLabel>\n                    <FormControl>\n                      <Textarea\n                        placeholder=\"Ä°steÄe baÄlÄ± aÃ§Ä±klama\"\n                        {...field}\n                        data-testid=\"textarea-special-day-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex space-x-3\">\n                <Button type=\"submit\" data-testid=\"button-save-special-day\">\n                  Kaydet\n                </Button>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setShowAddSpecialDay(false);\n                    form.reset();\n                  }}\n                  data-testid=\"button-cancel-special-day\"\n                >\n                  Ä°ptal\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </MainLayout>\n  );\n}","size_bytes":22841}},"version":1}